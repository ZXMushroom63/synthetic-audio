{
  "version": 3,
  "sources": ["../src/riff.js", "../src/parser.js", "../src/sound_font_synth_note.js", "../src/sound_font_synth.js", "../src/index.js"],
  "sourcesContent": ["/* eslint-disable no-bitwise */\r\n/**\r\n * Riff Parser class\r\n * @private\r\n */\r\nexport class Riff {\r\n  /**\r\n   * @param {Uint8Array} input input buffer.\r\n   * @param {Object=} optParams option parameters.\r\n   */\r\n  constructor (input, optParams = {}) {\r\n    this.input = input;\r\n    /** @type {number} */\r\n    this.ip = optParams.index || 0;\r\n    /** @type {number} */\r\n    this.length = optParams.length || input.length - this.ip;\r\n    /** @type {Array.<RiffChunk>} */\r\n    this.chunkList = [];\r\n    /** @type {number} */\r\n    this.offset = this.ip;\r\n    /** @type {boolean} */\r\n    this.padding =\r\n      optParams.padding !== undefined ? optParams.padding : true;\r\n    /** @type {boolean} */\r\n    this.bigEndian =\r\n      optParams.bigEndian !== undefined ? optParams.bigEndian : false;\r\n  }\r\n\r\n  parse () {\r\n    /** @type {number} */\r\n    const length = this.length + this.offset;\r\n\r\n    this.chunkList = [];\r\n\r\n    while (this.ip < length) {\r\n      this.parseChunk();\r\n    }\r\n  }\r\n\r\n  parseChunk () {\r\n    const input = this.input;\r\n    /** @type {number} */\r\n    let ip = this.ip;\r\n    /** @type {number} */\r\n    let size;\r\n\r\n    this.chunkList.push(new RiffChunk(\r\n      String.fromCharCode(input[ip++], input[ip++], input[ip++], input[ip++]),\r\n      (size = this.bigEndian ?\r\n        ((input[ip++] << 24) | (input[ip++] << 16) |\r\n          (input[ip++] << 8) | (input[ip++])) >>> 0 :\r\n        ((input[ip++]) | (input[ip++] << 8) |\r\n          (input[ip++] << 16) | (input[ip++] << 24)) >>> 0\r\n      ),\r\n      ip\r\n    ));\r\n\r\n    ip += size;\r\n\r\n    // padding\r\n    if (this.padding && ((ip - this.offset) & 1) === 1) {\r\n      ip++;\r\n    }\r\n\r\n    this.ip = ip;\r\n  }\r\n\r\n  /**\r\n   * @param {number} index chunk index.\r\n   * @return {?RiffChunk}\r\n   */\r\n  getChunk (index) {\r\n    /** @type {RiffChunk} */\r\n    const chunk = this.chunkList[index];\r\n\r\n    if (chunk === undefined) {\r\n      return null;\r\n    }\r\n\r\n    return chunk;\r\n  }\r\n\r\n  /**\r\n   * @return {number}\r\n   */\r\n  getNumberOfChunks () {\r\n    return this.chunkList.length;\r\n  }\r\n}\r\n\r\n/**\r\n * Riff Chunk Structure\r\n * @interface\r\n */\r\nexport class RiffChunk {\r\n  /**\r\n   * @param {string} type\r\n   * @param {number} size\r\n   * @param {number} offset\r\n   */\r\n  constructor (type, size, offset) {\r\n    /** @type {string} */\r\n    this.type = type;\r\n    /** @type {number} */\r\n    this.size = size;\r\n    /** @type {number} */\r\n    this.offset = offset;\r\n  }\r\n}\r\n\r\nexport default Riff;\r\n", "/* eslint-disable no-bitwise */\r\nimport * as RiffHelper from './riff.js';\r\n\r\n/**\r\n * @typedef InstrumentGenerator\r\n * @prop {Array.<Object>} startAddrsOffset\r\n * @prop {Array.<Object>} endAddrsOffset\r\n * @prop {Array.<Object>} startloopAddrsOffset\r\n * @prop {Array.<Object>} endloopAddrsOffset\r\n * @prop {Array.<Object>} startAddrsCoarseOffset\r\n * @prop {Array.<Object>} modLfoToPitch\r\n * @prop {Array.<Object>} vibLfoToPitch\r\n * @prop {Array.<Object>} modEnvToPitch\r\n * @prop {Array.<Object>} initialFilterFc\r\n * @prop {Array.<Object>} initialFilterQ\r\n * @prop {Array.<Object>} modLfoToFilterFc\r\n * @prop {Array.<Object>} modEnvToFilterFc\r\n * @prop {Array.<Object>} endAddrsCoarseOffset\r\n * @prop {Array.<Object>} modLfoToVolume\r\n * @prop {Array.<Object>} chorusEffectsSend\r\n * @prop {Array.<Object>} reverbEffectsSend\r\n * @prop {Array.<Object>} pan\r\n * @prop {Array.<Object>} delayModLFO\r\n * @prop {Array.<Object>} freqModLFO\r\n * @prop {Array.<Object>} delayVibLFO\r\n * @prop {Array.<Object>} freqVibLFO\r\n * @prop {Array.<Object>} delayModEnv\r\n * @prop {Array.<Object>} attackModEnv\r\n * @prop {Array.<Object>} holdModEnv\r\n * @prop {Array.<Object>} decayModEnv\r\n * @prop {Array.<Object>} sustainModEnv\r\n * @prop {Array.<Object>} releaseModEnv\r\n * @prop {Array.<Object>} keynumToModEnvHold\r\n * @prop {Array.<Object>} keynumToModEnvDecay\r\n * @prop {Array.<Object>} delayVolEnv\r\n * @prop {Array.<Object>} attackVolEnv\r\n * @prop {Array.<Object>} holdVolEnv\r\n * @prop {Array.<Object>} decayVolEnv\r\n * @prop {Array.<Object>} sustainVolEnv\r\n * @prop {Array.<Object>} releaseVolEnv\r\n * @prop {Array.<Object>} keynumToVolEnvHold\r\n * @prop {Array.<Object>} keynumToVolEnvDecay\r\n * @prop {Array.<Object>} instrument\r\n * @prop {Array.<Object>} keyRange\r\n * @prop {Array.<Object>} velRange\r\n * @prop {Array.<Object>} startloopAddrsCoarseOffset\r\n * @prop {Array.<Object>} keynum\r\n * @prop {Array.<Object>} velocity\r\n * @prop {Array.<Object>}initialAttenuation\r\n * @prop {Array.<Object>} endloopAddrsCoarseOffset\r\n * @prop {Array.<Object>} coarseTune\r\n * @prop {Array.<Object>} fineTune\r\n * @prop {Array.<Object>} sampleID\r\n * @prop {Array.<Object>} sampleModes\r\n * @prop {Array.<Object>} scaleTuning\r\n * @prop {Array.<Object>} exclusiveClass\r\n * @prop {Array.<Object>} overridingRootKey\r\n * @prop {Array.<Object>} endOper\r\n */\r\n\r\n/**\r\n * SoundFont Parser Class\r\n */\r\nexport class Parser {\r\n  /**\r\n   * @param {Uint8Array} input\r\n   * @param {Object=} optParams\r\n   */\r\n  constructor(input, optParams = {}) {\r\n    this.input = input;\r\n    /** @type {(Object|undefined)} */\r\n    this.parserOption = optParams.parserOption || {};\r\n    /** @type {(Number|undefined)} */\r\n    this.sampleRate = optParams.sampleRate || 22050; // \u3088\u304F\u308F\u304B\u3089\u3093\u304C\u3001OS\u3067\u6307\u5B9A\u3055\u308C\u3066\u3044\u308B\u30B5\u30F3\u30D7\u30EB\u30EC\u30FC\u30C8\u3092\u5165\u308C\u306A\u3044\u3068\u97F3\u304C\u5207\u308C\u5207\u308C\u306B\u306A\u308B\u3002\r\n\r\n    /** @type {Array.<Object>} */\r\n    this.presetHeader = [];\r\n    /** @type {Array.<Object>} */\r\n    this.presetZone = [];\r\n    /** @type {Array.<Object>} */\r\n    this.presetZoneModulator = [];\r\n    /** @type {Array.<Object>} */\r\n    this.presetZoneGenerator = [];\r\n    /** @type {Array.<Object>} */\r\n    this.instrument = [];\r\n    /** @type {Array.<Object>} */\r\n    this.instrumentZone = [];\r\n    /** @type {Array.<Object>} */\r\n    this.instrumentZoneModulator = [];\r\n    /** @type {Array.<Object>} */\r\n    this.instrumentZoneGenerator = [];\r\n    /** @type {Array.<Object>} */\r\n    this.sampleHeader = [];\r\n\r\n    /**\r\n     * @type {Array.<string>}\r\n     * @const\r\n     */\r\n    // eslint-disable-next-line no-sparse-arrays\r\n    this.GeneratorEnumeratorTable = [\r\n      'startAddrsOffset',\r\n      'endAddrsOffset',\r\n      'startloopAddrsOffset',\r\n      'endloopAddrsOffset',\r\n      'startAddrsCoarseOffset',\r\n      'modLfoToPitch',\r\n      'vibLfoToPitch',\r\n      'modEnvToPitch',\r\n      'initialFilterFc',\r\n      'initialFilterQ',\r\n      'modLfoToFilterFc',\r\n      'modEnvToFilterFc',\r\n      'endAddrsCoarseOffset',\r\n      'modLfoToVolume', , // 14\r\n      'chorusEffectsSend',\r\n      'reverbEffectsSend',\r\n      'pan', , , , // 18,19,20\r\n      'delayModLFO',\r\n      'freqModLFO',\r\n      'delayVibLFO',\r\n      'freqVibLFO',\r\n      'delayModEnv',\r\n      'attackModEnv',\r\n      'holdModEnv',\r\n      'decayModEnv',\r\n      'sustainModEnv',\r\n      'releaseModEnv',\r\n      'keynumToModEnvHold',\r\n      'keynumToModEnvDecay',\r\n      'delayVolEnv',\r\n      'attackVolEnv',\r\n      'holdVolEnv',\r\n      'decayVolEnv',\r\n      'sustainVolEnv',\r\n      'releaseVolEnv',\r\n      'keynumToVolEnvHold',\r\n      'keynumToVolEnvDecay',\r\n      'instrument', , // 42\r\n      'keyRange',\r\n      'velRange',\r\n      'startloopAddrsCoarseOffset',\r\n      'keynum',\r\n      'velocity',\r\n      'initialAttenuation', , // 49\r\n      'endloopAddrsCoarseOffset',\r\n      'coarseTune',\r\n      'fineTune',\r\n      'sampleID',\r\n      'sampleModes', , // 55\r\n      'scaleTuning',\r\n      'exclusiveClass',\r\n      'overridingRootKey', // 59\r\n      'endOper'\r\n    ];\r\n  }\r\n\r\n  parse() {\r\n    const parser = new RiffHelper.Riff(this.input, this.parserOption);\r\n\r\n    // parse RIFF chunk\r\n    parser.parse();\r\n    if (parser.chunkList.length !== 1) {\r\n      throw new Error('wrong chunk length');\r\n    }\r\n\r\n    /** @type {?RiffHelper.RiffChunk} */\r\n    const chunk = parser.getChunk(0);\r\n\r\n    if (chunk === null) {\r\n      throw new Error('chunk not found');\r\n    }\r\n\r\n    this.parseRiffChunk(chunk);\r\n    // console.log(this.sampleHeader);\r\n    this.input = null;\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseRiffChunk(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'RIFF') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    // check signature\r\n    /** @type {string} */\r\n    const signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\r\n\r\n    if (signature !== 'sfbk') {\r\n      throw new Error('invalid signature:' + signature);\r\n    }\r\n\r\n    // read structure\r\n    const parser = new RiffHelper.Riff(data, { 'index': ip, 'length': chunk.size - 4 });\r\n\r\n    parser.parse();\r\n\r\n    if (parser.getNumberOfChunks() !== 3) {\r\n      throw new Error('invalid sfbk structure');\r\n    }\r\n\r\n    // INFO-list\r\n    this.parseInfoList(parser.getChunk(0));\r\n\r\n    // sdta-list\r\n    this.parseSdtaList(parser.getChunk(1));\r\n\r\n    // pdta-list\r\n    this.parsePdtaList(parser.getChunk(2));\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {any}\r\n   */\r\n  parseInfoList(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'LIST') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    // check signature\r\n    /** @type {string} */\r\n    const signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\r\n\r\n    if (signature !== 'INFO') {\r\n      throw new Error('invalid signature:' + signature);\r\n    }\r\n\r\n    // read structure\r\n    const parser = new RiffHelper.Riff(data, { 'index': ip, 'length': chunk.size - 4 });\r\n\r\n    parser.parse();\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseSdtaList(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'LIST') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    // check signature\r\n    /** @type {string} */\r\n    const signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\r\n\r\n    if (signature !== 'sdta') {\r\n      throw new Error('invalid signature:' + signature);\r\n    }\r\n\r\n    // read structure\r\n    const parser = new RiffHelper.Riff(data, { 'index': ip, 'length': chunk.size - 4 });\r\n\r\n    parser.parse();\r\n\r\n    if (parser.chunkList.length === 0) {\r\n      throw new Error(\"sdta chunk has no samples\");\r\n    }\r\n\r\n    const firstChunk = parser.getChunk(0);\r\n    const totalSize = parser.chunkList.reduce((sum, currentChunk) => sum + currentChunk.size, 0);\r\n\r\n    this.samplingData =\r\n    /** @type {{type: string, size: number, offset: number}} */\r\n    {\r\n      type: firstChunk.type,\r\n      size: totalSize,\r\n      offset: firstChunk.offset\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parsePdtaList(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'LIST') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    // check signature\r\n    /** @type {string} */\r\n    const signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\r\n\r\n    if (signature !== 'pdta') {\r\n      throw new Error('invalid signature:' + signature);\r\n    }\r\n\r\n    // read structure\r\n    const parser = new RiffHelper.Riff(data, { 'index': ip, 'length': chunk.size - 4 });\r\n\r\n    parser.parse();\r\n\r\n    // check number of chunks\r\n    if (parser.getNumberOfChunks() !== 9) {\r\n      throw new Error('invalid pdta chunk');\r\n    }\r\n\r\n    this.parsePhdr(parser.getChunk(0));\r\n    this.parsePbag(parser.getChunk(1));\r\n    this.parsePmod(parser.getChunk(2));\r\n    this.parsePgen(parser.getChunk(3));\r\n    this.parseInst(parser.getChunk(4));\r\n    this.parseIbag(parser.getChunk(5));\r\n    this.parseImod(parser.getChunk(6));\r\n    this.parseIgen(parser.getChunk(7));\r\n    this.parseShdr(parser.getChunk(8));\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parsePhdr(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    this.presetHeader = [];\r\n\r\n    const { presetHeader } = this;\r\n\r\n    /** @type {number} */\r\n    const size = chunk.offset + chunk.size;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'phdr') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    while (ip < size) {\r\n      presetHeader.push({\r\n        presetName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\r\n        preset: data[ip++] | (data[ip++] << 8),\r\n        bank: data[ip++] | (data[ip++] << 8),\r\n        presetBagIndex: data[ip++] | (data[ip++] << 8),\r\n        library: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\r\n        genre: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\r\n        morphology: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parsePbag(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    this.presetZone = [];\r\n\r\n    const { presetZone } = this;\r\n\r\n    const size = chunk.offset + chunk.size;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'pbag') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    while (ip < size) {\r\n      presetZone.push({\r\n        presetGeneratorIndex: data[ip++] | (data[ip++] << 8),\r\n        presetModulatorIndex: data[ip++] | (data[ip++] << 8)\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parsePmod(chunk) {\r\n    // check parse target\r\n    if (chunk.type !== 'pmod') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    this.presetZoneModulator = this.parseModulator(chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parsePgen(chunk) {\r\n    // check parse target\r\n    if (chunk.type !== 'pgen') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n    this.presetZoneGenerator = this.parseGenerator(chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseInst(chunk) {\r\n    const data = this.input;\r\n\r\n    let ip = chunk.offset;\r\n\r\n    this.instrument = [];\r\n    const { instrument } = this;\r\n\r\n    const size = chunk.offset + chunk.size;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'inst') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    while (ip < size) {\r\n      instrument.push({\r\n        instrumentName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\r\n        instrumentBagIndex: data[ip++] | (data[ip++] << 8)\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseIbag(chunk) {\r\n    const data = this.input;\r\n    let ip = chunk.offset;\r\n\r\n    this.instrumentZone = [];\r\n    const { instrumentZone } = this;\r\n    const size = chunk.offset + chunk.size;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'ibag') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    while (ip < size) {\r\n      instrumentZone.push({\r\n        instrumentGeneratorIndex: data[ip++] | (data[ip++] << 8),\r\n        instrumentModulatorIndex: data[ip++] | (data[ip++] << 8)\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseImod(chunk) {\r\n    // check parse target\r\n    if (chunk.type !== 'imod') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    this.instrumentZoneModulator = this.parseModulator(chunk);\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseIgen(chunk) {\r\n    // check parse target\r\n    if (chunk.type !== 'igen') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    this.instrumentZoneGenerator = this.parseGenerator(chunk,true);\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @returns {void}\r\n   */\r\n  parseShdr(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n\r\n    this.sample = [];\r\n    const { sample: samples } = this;\r\n\r\n    this.sampleHeader = [];\r\n    const { sampleHeader } = this;\r\n\r\n    const size = chunk.offset + chunk.size;\r\n\r\n    /** @type {string} */\r\n    let sampleName;\r\n    /** @type {number} */\r\n    let start;\r\n    /** @type {number} */\r\n    let end;\r\n    /** @type {number} */\r\n    let startLoop;\r\n    /** @type {number} */\r\n    let endLoop;\r\n    /** @type {number} */\r\n    let sampleRate;\r\n    /** @type {number} */\r\n    let originalPitch;\r\n    /** @type {number} */\r\n    let pitchCorrection;\r\n    /** @type {number} */\r\n    let sampleLink;\r\n    /** @type {number} */\r\n    let sampleType;\r\n\r\n    // check parse target\r\n    if (chunk.type !== 'shdr') {\r\n      throw new Error('invalid chunk type:' + chunk.type);\r\n    }\r\n\r\n    while (ip < size) {\r\n      sampleName = String.fromCharCode.apply(null, data.subarray(ip, ip += 20));\r\n      start = (\r\n        (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\r\n      ) >>> 0;\r\n      end = (\r\n        (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\r\n      ) >>> 0;\r\n      startLoop = (\r\n        (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\r\n      ) >>> 0;\r\n      endLoop = (\r\n        (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\r\n      ) >>> 0;\r\n      sampleRate = (\r\n        (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\r\n      ) >>> 0;\r\n      originalPitch = data[ip++];\r\n      pitchCorrection = (data[ip++] << 24) >> 24;\r\n      sampleLink = data[ip++] | (data[ip++] << 8);\r\n      sampleType = data[ip++] | (data[ip++] << 8);\r\n\r\n      let sample = new Int16Array(new Uint8Array(data.subarray(\r\n        this.samplingData.offset + start * 2,\r\n        this.samplingData.offset + end * 2\r\n      )).buffer);\r\n\r\n      startLoop -= start;\r\n      endLoop -= start;\r\n\r\n      if (sampleRate > 0) {\r\n        const adjust = this.adjustSampleData(sample, sampleRate);\r\n\r\n        sample = adjust.sample;\r\n        sampleRate *= adjust.multiply;\r\n        startLoop *= adjust.multiply;\r\n        endLoop *= adjust.multiply;\r\n      }\r\n\r\n      samples.push(sample);\r\n\r\n      sampleHeader.push({\r\n        sampleName: sampleName,\r\n        start: start,\r\n        end: end,\r\n        startLoop: startLoop,\r\n        endLoop: endLoop,\r\n        sampleRate: sampleRate,\r\n        originalPitch: originalPitch,\r\n        pitchCorrection: pitchCorrection,\r\n        sampleLink: sampleLink,\r\n        sampleType: sampleType\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Int16Array} sample\r\n   * @param {number} sampleRate\r\n   * @return {object}\r\n   */\r\n  adjustSampleData(sample, sampleRate) {\r\n    /** @type {Int16Array} */\r\n    let newSample;\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {number} */\r\n    let j;\r\n    /** @type {number} */\r\n    let multiply = 1;\r\n\r\n    // buffer\r\n    while (sampleRate < (this.sampleRate)) {\r\n      newSample = new Int16Array(sample.length * 2);\r\n      // eslint-disable-next-line no-multi-assign\r\n      for (i = j = 0, il = sample.length; i < il; ++i) {\r\n        newSample[j++] = sample[i];\r\n        newSample[j++] = sample[i];\r\n      }\r\n      sample = newSample;\r\n      multiply *= 2;\r\n      sampleRate *= 2;\r\n    }\r\n\r\n    return {\r\n      sample: sample,\r\n      multiply: multiply\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @return {Array.<Object>}\r\n   */\r\n  parseModulator(chunk) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n    /** @type {number} */\r\n    const size = chunk.offset + chunk.size;\r\n    /** @type {number} */\r\n    let code;\r\n    /** @type {string} */\r\n    let key;\r\n    /** @type {Array.<Object>} */\r\n    const output = [];\r\n\r\n    while (ip < size) {\r\n      // Src  Oper\r\n      // TODO\r\n      ip += 2;\r\n\r\n      // Dest Oper\r\n      code = data[ip++] | (data[ip++] << 8);\r\n      key = this.GeneratorEnumeratorTable[code];\r\n      if (key === undefined) {\r\n        // Amount\r\n        output.push({\r\n          type: key,\r\n          value: {\r\n            code: code,\r\n            amount: data[ip] | (data[ip + 1] << 8) << 16 >> 16,\r\n            lo: data[ip++],\r\n            hi: data[ip++]\r\n          }\r\n        });\r\n      } else {\r\n        // Amount\r\n        switch (key) {\r\n          case 'keyRange':\r\n          /* FALLTHROUGH */\r\n          case 'velRange':\r\n          /* FALLTHROUGH */\r\n          case 'keynum':\r\n          /* FALLTHROUGH */\r\n          case 'velocity':\r\n            output.push({\r\n              type: key,\r\n              value: {\r\n                lo: data[ip++],\r\n                hi: data[ip++]\r\n              }\r\n            });\r\n            break;\r\n          default:\r\n            output.push({\r\n              type: key,\r\n              value: {\r\n                amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\r\n              }\r\n            });\r\n            break;\r\n        }\r\n      }\r\n\r\n      // AmtSrcOper\r\n      // TODO\r\n      ip += 2;\r\n\r\n      // Trans Oper\r\n      // TODO\r\n      ip += 2;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @param {RiffHelper.RiffChunk} chunk\r\n   * @return {Array.<Object>}\r\n   */\r\n  parseGenerator(chunk, dbg) {\r\n    const data = this.input;\r\n    /** @type {number} */\r\n    let ip = chunk.offset;\r\n    /** @type {number} */\r\n    const size = chunk.offset + chunk.size;\r\n    /** @type {number} */\r\n    let code;\r\n    /** @type {string} */\r\n    let key;\r\n    /** @type {Array.<Object>} */\r\n    const output = [];\r\n\r\n    while (ip < size) {\r\n      code = data[ip++] | (data[ip++] << 8);\r\n      key = this.GeneratorEnumeratorTable[code];\r\n      \r\n      if (key === undefined) {\r\n        output.push({\r\n          type: key,\r\n          value: {\r\n            code: code,\r\n            amount: data[ip] | (data[ip + 1] << 8) << 16 >> 16,\r\n            lo: data[ip++],\r\n            hi: data[ip++]\r\n          }\r\n        });\r\n        continue;\r\n      }\r\n\r\n      switch (key) {\r\n        case 'keynum':\r\n        /* FALLTHROUGH */\r\n        case 'keyRange':\r\n        /* FALLTHROUGH */\r\n        case 'velRange':\r\n        /* FALLTHROUGH */\r\n        case 'velocity':\r\n          output.push({\r\n            type: key,\r\n            value: {\r\n              lo: data[ip++],\r\n              hi: data[ip++]\r\n            }\r\n          });\r\n          break;\r\n        default:\r\n          output.push({\r\n            type: key,\r\n            value: {\r\n              amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\r\n            }\r\n          });\r\n          break;\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<object>}\r\n   */\r\n  createInstrument() {\r\n    /** @type {Array.<Object>} */\r\n    const instrument = this.instrument;\r\n    /** @type {Array.<Object>} */\r\n    const zone = this.instrumentZone;\r\n    /** @type {Array.<Object>} */\r\n    const output = [];\r\n    /** @type {number} */\r\n    let bagIndex;\r\n    /** @type {number} */\r\n    let bagIndexEnd;\r\n    /** @type {Array.<Object>} */\r\n    let zoneInfo;\r\n    /** @type {{generator: InstrumentGenerator, generatorInfo: Array.<Object>}} */\r\n    let instrumentGenerator;\r\n    /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\r\n    let instrumentModulator;\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {number} */\r\n    let j;\r\n    /** @type {number} */\r\n    let jl;\r\n\r\n    // instrument -> instrument bag -> generator / modulator\r\n    for (i = 0, il = instrument.length; i < il; ++i) {\r\n      bagIndex = instrument[i].instrumentBagIndex;\r\n      bagIndexEnd = instrument[i + 1] ? instrument[i + 1].instrumentBagIndex : zone.length;\r\n      zoneInfo = [];\r\n\r\n      // instrument bag\r\n      for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\r\n        instrumentGenerator = this.createInstrumentGenerator_(zone, j);\r\n        instrumentModulator = this.createInstrumentModulator_(zone, j);\r\n\r\n        zoneInfo.push({\r\n          generator: instrumentGenerator.generator,\r\n          generatorSequence: instrumentGenerator.generatorInfo,\r\n          modulator: instrumentModulator.modulator,\r\n          modulatorSequence: instrumentModulator.modulatorInfo\r\n        });\r\n      }\r\n\r\n      output.push({\r\n        name: instrument[i].instrumentName,\r\n        info: zoneInfo\r\n      });\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<object>}\r\n   */\r\n  createPreset() {\r\n    /** @type {Array.<Object>} */\r\n    const preset = this.presetHeader;\r\n    /** @type {Array.<Object>} */\r\n    const zone = this.presetZone;\r\n    /** @type {Array.<Object>} */\r\n    const output = [];\r\n    /** @type {number} */\r\n    let bagIndex;\r\n    /** @type {number} */\r\n    let bagIndexEnd;\r\n    /** @type {Array.<Object>} */\r\n    let zoneInfo;\r\n    /** @type {number} */\r\n    let instrument;\r\n    /** @type {{generator: InstrumentGenerator, generatorInfo: Array.<Object>}} */\r\n    let presetGenerator;\r\n    /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\r\n    let presetModulator;\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {number} */\r\n    let j;\r\n    /** @type {number} */\r\n    let jl;\r\n\r\n    // preset -> preset bag -> generator / modulator\r\n    for (i = 0, il = preset.length; i < il; ++i) {\r\n      bagIndex = preset[i].presetBagIndex;\r\n      bagIndexEnd = preset[i + 1] ? preset[i + 1].presetBagIndex : zone.length;\r\n      zoneInfo = [];\r\n\r\n      // preset bag\r\n      for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\r\n        presetGenerator = this.createPresetGenerator_(zone, j);\r\n        presetModulator = this.createPresetModulator_(zone, j);\r\n\r\n        zoneInfo.push({\r\n          generator: presetGenerator.generator,\r\n          generatorSequence: presetGenerator.generatorInfo,\r\n          modulator: presetModulator.modulator,\r\n          modulatorSequence: presetModulator.modulatorInfo\r\n        });\r\n\r\n        instrument =\r\n          presetGenerator.generator.instrument !== undefined ?\r\n            presetGenerator.generator.instrument.amount :\r\n            presetModulator.modulator.instrument !== undefined ?\r\n              presetModulator.modulator.instrument.amount :\r\n              null;\r\n      }\r\n\r\n      output.push({\r\n        name: preset[i].presetName,\r\n        info: zoneInfo,\r\n        header: preset[i],\r\n        instrument: instrument\r\n      });\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<Object>} zone\r\n   * @param {number} index\r\n   * @return {{generator: Object, generatorInfo: Array.<Object>}}\r\n   * @private\r\n   */\r\n  createInstrumentGenerator_(zone, index) {\r\n    const modgen = this.createBagModGen_(\r\n      zone,\r\n      zone[index].instrumentGeneratorIndex,\r\n      zone[index + 1] ? zone[index + 1].instrumentGeneratorIndex : this.instrumentZoneGenerator.length,\r\n      this.instrumentZoneGenerator\r\n    );\r\n\r\n    return {\r\n      generator: modgen.modgen,\r\n      generatorInfo: modgen.modgenInfo\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<Object>} zone\r\n   * @param {number} index\r\n   * @return {{modulator: Object, modulatorInfo: Array.<Object>}}\r\n   * @private\r\n   */\r\n  createInstrumentModulator_(zone, index) {\r\n    const modgen = this.createBagModGen_(\r\n      zone,\r\n      zone[index].presetModulatorIndex,\r\n      zone[index + 1] ? zone[index + 1].instrumentModulatorIndex : this.instrumentZoneModulator.length,\r\n      this.instrumentZoneModulator\r\n    );\r\n\r\n    return {\r\n      modulator: modgen.modgen,\r\n      modulatorInfo: modgen.modgenInfo\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<Object>} zone\r\n   * @param {number} index\r\n   * @return {{generator: InstrumentGenerator, generatorInfo: Array.<Object>}}\r\n   * @private\r\n   */\r\n  createPresetGenerator_(zone, index) {\r\n    const modgen = this.createBagModGen_(\r\n      zone,\r\n      zone[index].presetGeneratorIndex,\r\n      zone[index + 1] ? zone[index + 1].presetGeneratorIndex : this.presetZoneGenerator.length,\r\n      this.presetZoneGenerator\r\n    );\r\n\r\n    return {\r\n      generator: modgen.modgen,\r\n      generatorInfo: modgen.modgenInfo\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<Object>} zone\r\n   * @param {number} index\r\n   * @return {{modulator: Object, modulatorInfo: Array.<Object>}}\r\n   * @private\r\n   */\r\n  createPresetModulator_(zone, index) {\r\n    /** @type {{modgen: Object, modgenInfo: Array.<Object>}} */\r\n    const modgen = this.createBagModGen_(\r\n      zone,\r\n      zone[index].presetModulatorIndex,\r\n      zone[index + 1] ? zone[index + 1].presetModulatorIndex : this.presetZoneModulator.length,\r\n      this.presetZoneModulator\r\n    );\r\n\r\n    return {\r\n      modulator: modgen.modgen,\r\n      modulatorInfo: modgen.modgenInfo\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<Object>} zone\r\n   * @param {number} indexStart\r\n   * @param {number} indexEnd\r\n   * @param {Array} zoneModGen\r\n   * @return {{modgen: Object, modgenInfo: Array.<Object>}}\r\n   * @private\r\n   */\r\n  createBagModGen_(zone, indexStart, indexEnd, zoneModGen) {\r\n    /** @type {Array.<Object>} */\r\n    const modgenInfo = [];\r\n    /** @type {Object} */\r\n    const modgen = {\r\n      'unknown': [],\r\n      'keyRange': {\r\n        hi: 127,\r\n        lo: 0\r\n      }\r\n    }; // TODO\r\n    /** @type {Object} */\r\n    let info;\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n\r\n    for (i = indexStart, il = indexEnd; i < il; ++i) {\r\n      info = zoneModGen[i];\r\n      modgenInfo.push(info);\r\n\r\n      if (info.type === 'unknown') {\r\n        modgen.unknown.push(info.value);\r\n      } else {\r\n        modgen[info.type] = info.value;\r\n      }\r\n    }\r\n\r\n    return {\r\n      modgen: modgen,\r\n      modgenInfo: modgenInfo\r\n    };\r\n  }\r\n}\r\n\r\nexport default Parser;\r\n", "/* eslint-disable no-bitwise */\r\n\r\n/** @typedef Instrument\r\n * @prop {number} channel\r\n * @prop {number} key\r\n * @prop {Uint8Array} sample\r\n * @prop {number} basePlaybackRate\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} pan\r\n * @prop {number} scaleTuning\r\n * @prop {number} loopStart\r\n * @prop {number} loopEnd\r\n * @prop {number} volume\r\n * @prop {number} panpot\r\n * @prop {number} sampleModes\r\n * @prop {boolean} mute\r\n * @prop {number} initialFilterQ\r\n * @prop {number} initialFilterFc\r\n * @prop {number} initialAttenuation\r\n * @prop {number} modEnvToFilterFc\r\n * @prop {number} modDelay\r\n * @prop {number} modAttack\r\n * @prop {number} modHold\r\n * @prop {number} modDecay\r\n * @prop {number} modSustain\r\n * @prop {number} modRelease\r\n * @prop {number} volDelay\r\n * @prop {number} volDecay\r\n * @prop {number} volSustain\r\n * @prop {number} volAttack\r\n * @prop {number} volHold\r\n * @prop {number} releaseTime\r\n * @prop {number} volRelease\r\n * @prop {number} velocity\r\n * @prop {number} sampleRate\r\n * @prop {number} pitchBend\r\n * @prop {number} pitchBendSensitivity\r\n * @prop {number} modEnvToPitch\r\n * @prop {number} expression\r\n * @prop {number} cutOffFrequency\r\n * @prop {number} hermonicContent\r\n */\r\n\r\n/**\r\n * SynthesizerNote Class\r\n * @private\r\n */\r\nexport class SynthesizerNote {\r\n  /**\r\n   * @param {AudioContext} ctx\r\n   * @param {AudioNode} destination\r\n   * @param {Instrument} instrument\r\n   */\r\n  constructor (ctx, destination, instrument, customBuffer) {\r\n    /** @type {Uint8Array} */\r\n    this.customBuffer = customBuffer;\r\n    /** @type {AudioContext} */\r\n    this.ctx = ctx;\r\n    /** @type {AudioNode} */\r\n    this.destination = destination;\r\n    this.instrument = instrument;\r\n    /** @type {number} */\r\n    this.channel = instrument.channel;\r\n    /** @type {number} */\r\n    this.key = instrument.key;\r\n    /** @type {number} */\r\n    this.velocity = instrument.velocity;\r\n    /** @type {Uint8Array|Float32Array} */\r\n    this.buffer = customBuffer || instrument.sample;\r\n    /** @type {number} */\r\n    this.playbackRate = instrument.basePlaybackRate;\r\n    /** @type {number} */\r\n    this.loopStart = instrument.loopStart;\r\n    /** @type {number} */\r\n    this.loopEnd = instrument.loopEnd;\r\n    /** @type {number} */\r\n    this.sampleRate = instrument.sampleRate;\r\n    /** @type {number} */\r\n    this.volume = instrument.volume;\r\n    /** @type {number} */\r\n    this.panpot = instrument.panpot;\r\n    /** @type {number} */\r\n    this.pitchBend = instrument.pitchBend;\r\n    /** @type {number} */\r\n    this.pitchBendSensitivity = instrument.pitchBendSensitivity;\r\n    /** @type {number} */\r\n    this.modEnvToPitch = instrument.modEnvToPitch;\r\n    /** @type {number} */\r\n    this.expression = instrument.expression;\r\n    /** @type {number} */\r\n    this.cutOffFrequency = instrument.cutOffFrequency;\r\n    /** @type {number} */\r\n    this.hermonicContent = instrument.hermonicContent;\r\n\r\n    // state\r\n    /** @type {number} */\r\n    this.startTime = ctx.currentTime;\r\n    /** @type {number} */\r\n    this.computedPlaybackRate = this.playbackRate | 0;\r\n    /** @type {boolean} */\r\n    this.noteOffState = false;\r\n\r\n    // ---------------------------------------------------------------------------\r\n    // audio node\r\n    // ---------------------------------------------------------------------------\r\n\r\n    /** @type {AudioBuffer} */\r\n    this.audioBuffer = null;\r\n    /** @type {AudioBufferSourceNode} */\r\n    this.bufferSource = ctx.createBufferSource();\r\n    /** @type {GainNode} */\r\n    this.outputGainNode = ctx.createGain();\r\n    /** @type {GainNode} */\r\n    this.expressionGainNode = ctx.createGain();\r\n    /** @type {BiquadFilterNode} */\r\n    this.filter = ctx.createBiquadFilter();\r\n    /** @type {BiquadFilterNode} */\r\n    this.modulator = ctx.createBiquadFilter();\r\n  }\r\n\r\n  noteOn () {\r\n    /** @type {AudioContext} */\r\n    const ctx = this.ctx;\r\n\r\n    const instrument = this.instrument;\r\n\r\n    /** @type {number} */\r\n    const now = this.ctx.currentTime || 0;\r\n    /** @type {number} */\r\n    const volDelay = now + instrument.volDelay;\r\n    /** @type {number} */\r\n    const modDelay = now + instrument.modDelay;\r\n    /** @type {number} */\r\n    const volAttack = volDelay + instrument.volAttack;\r\n    /** @type {number} */\r\n    const modAttack = volDelay + instrument.modAttack;\r\n    /** @type {number} */\r\n    const volHold = volAttack + instrument.volHold;\r\n    /** @type {number} */\r\n    const modHold = modAttack + instrument.modHold;\r\n    /** @type {number} */\r\n    const volDecay = volHold + instrument.volDecay;\r\n    /** @type {number} */\r\n    const modDecay = modHold + instrument.modDecay;\r\n    /** @type {number} */\r\n    const loopStart = instrument.loopStart / this.sampleRate;\r\n    /** @type {number} */\r\n    const loopEnd = instrument.loopEnd / this.sampleRate;\r\n    /** @type {number} */\r\n    const startTime = instrument.start / this.sampleRate;\r\n    // TODO: \u30C9\u30E9\u30E0\u30D1\u30FC\u30C8\u306EPan\u304C\u5909\u5316\u3057\u305F\u5834\u5408\u3001\u305D\u306E\u8A08\u7B97\u3092\u3057\u306A\u3051\u308C\u3070\u306A\u3089\u306A\u3044\r\n    // http://cpansearch.perl.org/src/PJB/MIDI-SoundFont-1.08/doc/sfspec21.html#8.4.6\r\n    const pan = instrument.pan !== undefined ? instrument.pan : this.panpot;\r\n\r\n    const sample = this.buffer.subarray(0, this.buffer.length + instrument.end);\r\n\r\n    this.audioBuffer = ctx.createBuffer(1, sample.length, this.sampleRate);\r\n\r\n    const { audioBuffer: buffer } = this;\r\n\r\n    /** @type {Float32Array} */\r\n    const channelData = buffer.getChannelData(0);\r\n\r\n    channelData.set(sample);\r\n\r\n    // buffer source\r\n    /** @type {AudioBufferSourceNode} */\r\n    const bufferSource = this.bufferSource;\r\n\r\n    bufferSource.buffer = buffer;\r\n    // @ts-ignore\r\n    bufferSource.loop = instrument.sampleModes | 0 || 0;\r\n    bufferSource.loopStart = loopStart;\r\n    bufferSource.loopEnd = loopEnd;\r\n    this.updatePitchBend(this.pitchBend);\r\n\r\n    // Output\r\n    /** @type {GainNode} */\r\n    const output = this.outputGainNode;\r\n\r\n    // expression\r\n    this.expressionGainNode.gain.value = this.expression / 127;\r\n\r\n    // panpot\r\n    // panning stuff\r\n\r\n    // ---------------------------------------------------------------------------\r\n    // Delay, Attack, Hold, Decay, Sustain\r\n    // ---------------------------------------------------------------------------\r\n\r\n    /** @type {number} */\r\n    let volume = this.volume * (this.velocity / 127) * (1 - instrument.initialAttenuation / 1000);\r\n\r\n    if (volume < 0) {\r\n      volume = 0;\r\n    }\r\n\r\n    // volume envelope\r\n    const outputGain = output.gain;\r\n\r\n    outputGain.setValueAtTime(0, now);\r\n    outputGain.setValueAtTime(0, volDelay);\r\n    outputGain.setTargetAtTime(volume, volDelay, instrument.volAttack);\r\n    outputGain.setValueAtTime(volume, volHold);\r\n    outputGain.linearRampToValueAtTime(volume * (1 - instrument.volSustain), volDecay);\r\n\r\n    // modulation envelope\r\n    /** @type {number} */\r\n    const baseFreq = this.amountToFreq(instrument.initialFilterFc);\r\n    /** @type {number} */\r\n    const peekFreq = this.amountToFreq(instrument.initialFilterFc + instrument.modEnvToFilterFc);\r\n    /** @type {number} */\r\n    const sustainFreq = baseFreq + (peekFreq - baseFreq) * (1 - instrument.modSustain);\r\n\r\n    /** @type {BiquadFilterNode} */\r\n    const modulator = this.modulator;\r\n\r\n    modulator.Q.setValueAtTime(10 ** (instrument.initialFilterQ / 200), now);\r\n    modulator.frequency.value = baseFreq;\r\n    modulator.type = 'lowpass';\r\n    modulator.frequency.setTargetAtTime(baseFreq / 127, this.ctx.currentTime, 0.5);\r\n    modulator.frequency.setValueAtTime(baseFreq, now);\r\n    modulator.frequency.setValueAtTime(baseFreq, modDelay);\r\n    modulator.frequency.setTargetAtTime(peekFreq, modDelay, parseFloat(String(instrument.modAttack + 1))); // For FireFox fix\r\n    modulator.frequency.setValueAtTime(peekFreq, modHold);\r\n    modulator.frequency.linearRampToValueAtTime(sustainFreq, modDecay);\r\n\r\n    // connect\r\n    bufferSource.connect(modulator);\r\n    modulator.connect(this.expressionGainNode);\r\n\r\n    this.expressionGainNode.connect(output);\r\n\r\n    if (!instrument.mute) {\r\n      this.connect();\r\n    }\r\n\r\n    // fire\r\n    bufferSource.start(0, startTime);\r\n  }\r\n\r\n  /**\r\n   * @param {number} val\r\n   * @return {number}\r\n   */\r\n  amountToFreq (val) {\r\n    return 2 ** ((val - 6900) / 1200) * 440;\r\n  }\r\n\r\n  noteOff () {\r\n    this.noteOffState = true;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean}\r\n   */\r\n  isNoteOff () {\r\n    return this.noteOffState;\r\n  }\r\n\r\n  /**\r\n   * @return {void}\r\n   */\r\n  release () {\r\n    const instrument = this.instrument;\r\n    /** @type {AudioBufferSourceNode} */\r\n    const bufferSource = this.bufferSource;\r\n    /** @type {GainNode} */\r\n    const output = this.outputGainNode;\r\n    /** @type {number} */\r\n    const now = this.ctx.currentTime;\r\n    const release = instrument.releaseTime - 64;\r\n\r\n    // ---------------------------------------------------------------------------\r\n    // volume release time\r\n    // ---------------------------------------------------------------------------\r\n    /** @type {number} */\r\n    const volEndTimeTmp = instrument.volRelease * output.gain.value;\r\n    /** @type {number} */\r\n    const volEndTime = now + (volEndTimeTmp * (1 + release / (release < 0 ? 64 : 63)));\r\n    // var volEndTime = now + instrument['volRelease'] * (1 - instrument['volSustain']);\r\n\r\n    // ---------------------------------------------------------------------------\r\n    // modulation release time\r\n    // ---------------------------------------------------------------------------\r\n    /** @type {BiquadFilterNode} */\r\n    const modulator = this.modulator;\r\n    /** @type {number} */\r\n    const baseFreq = this.amountToFreq(instrument.initialFilterFc);\r\n    /** @type {number} */\r\n    const peekFreq = this.amountToFreq(instrument.initialFilterFc + instrument.modEnvToFilterFc);\r\n    /** @type {number} */\r\n    const modEndTime = now + instrument.modRelease *\r\n      (\r\n        baseFreq === peekFreq ?\r\n          1 :\r\n          (modulator.frequency.value - baseFreq) / (peekFreq - baseFreq)\r\n      );\r\n    // var modEndTime = now + instrument['modRelease'] * (1 - instrument['modSustain']);\r\n\r\n    if (!this.audioBuffer) {\r\n      return;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------------\r\n    // Release\r\n    // ---------------------------------------------------------------------------\r\n\r\n    switch (instrument.sampleModes) {\r\n    case 0:\r\n      // \u30EB\u30FC\u30D7\u3057\u306A\u3044\r\n      bufferSource.loop = false;\r\n      bufferSource.disconnect();\r\n      bufferSource.buffer = null;\r\n      break;\r\n    case 1:\r\n      // \u30EB\u30FC\u30D7\u3055\u305B\u308B\r\n      output.gain.cancelScheduledValues(0);\r\n      output.gain.setValueAtTime(output.gain.value, now);\r\n      output.gain.linearRampToValueAtTime(0, volEndTime);\r\n\r\n      modulator.frequency.cancelScheduledValues(0);\r\n      modulator.frequency.setValueAtTime(modulator.frequency.value, now);\r\n      modulator.frequency.linearRampToValueAtTime(baseFreq, modEndTime);\r\n\r\n      bufferSource.playbackRate.cancelScheduledValues(0);\r\n      bufferSource.playbackRate.setValueAtTime(bufferSource.playbackRate.value, now);\r\n      bufferSource.playbackRate.linearRampToValueAtTime(this.computedPlaybackRate, modEndTime);\r\n\r\n      bufferSource.stop(volEndTime);\r\n      break;\r\n    case 2:\r\n      // \u672A\u5B9A\u7FA9\r\n      console.error('detect unused sampleModes');\r\n      break;\r\n    case 3:\r\n      // \u30CE\u30FC\u30C8\u30AA\u30D5\u307E\u3067\u30EB\u30FC\u30D7\u3055\u305B\u308B\r\n      output.gain.cancelScheduledValues(0);\r\n      output.gain.setValueAtTime(output.gain.value, now);\r\n      output.gain.linearRampToValueAtTime(0, volEndTime);\r\n\r\n      modulator.frequency.cancelScheduledValues(0);\r\n      modulator.frequency.setValueAtTime(modulator.frequency.value, now);\r\n      modulator.frequency.linearRampToValueAtTime(baseFreq, modEndTime);\r\n\r\n      bufferSource.playbackRate.cancelScheduledValues(0);\r\n      bufferSource.playbackRate.setValueAtTime(bufferSource.playbackRate.value, now);\r\n      bufferSource.playbackRate.linearRampToValueAtTime(this.computedPlaybackRate, modEndTime);\r\n      break;\r\n    default:\r\n      bufferSource.loop = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  connect () {\r\n    this.outputGainNode.connect(this.destination);\r\n  }\r\n\r\n  disconnect () {\r\n    this.outputGainNode.disconnect(0);\r\n  }\r\n\r\n  schedulePlaybackRate () {\r\n    const playbackRate = this.bufferSource.playbackRate;\r\n    /** @type {number} */\r\n    const computed = this.computedPlaybackRate;\r\n    /** @type {number} */\r\n    const start = this.startTime;\r\n    /** @type {Object} */\r\n    const instrument = this.instrument;\r\n    /** @type {number} */\r\n    const modAttack = start + instrument.modAttack;\r\n    /** @type {number} */\r\n    const modDecay = modAttack + instrument.modDecay;\r\n    /** @type {number} */\r\n    const peekPitch = computed *\r\n      Math.pow(2, 1 / 12) **\r\n      (this.modEnvToPitch * this.instrument.scaleTuning);\r\n\r\n    playbackRate.cancelScheduledValues(0);\r\n    playbackRate.setValueAtTime(computed, start);\r\n    playbackRate.linearRampToValueAtTime(peekPitch, modAttack);\r\n    playbackRate.linearRampToValueAtTime(computed + (peekPitch - computed) * (1 - instrument.modSustain), modDecay);\r\n  }\r\n\r\n  /**\r\n   * @param {number} expression\r\n   * @returns {void}\r\n   */\r\n  updateExpression (expression) {\r\n    this.expressionGainNode.gain.value = (this.expression = expression) / 127;\r\n  }\r\n\r\n  /**\r\n   * @param {number} pitchBend\r\n   * @returns {void}\r\n   */\r\n  updatePitchBend (pitchBend) {\r\n    this.computedPlaybackRate = this.playbackRate * (\r\n      Math.pow(2, 1 / 12) **\r\n      ((pitchBend / (pitchBend < 0 ? 8192 : 8191)) *\r\n        this.pitchBendSensitivity *\r\n        this.instrument.scaleTuning));\r\n    this.schedulePlaybackRate();\r\n  }\r\n}\r\n\r\nexport default SynthesizerNote;\r\n", "/* eslint-disable no-bitwise */\r\nimport Parser from './parser.js';\r\nimport SynthesizerNote from './sound_font_synth_note.js';\r\n\r\n/**\r\n * Synthesizer Class\r\n * @private\r\n */\r\nexport class Synthesizer {\r\n  /**\r\n   * @param {Uint8Array} input\r\n   */\r\n  /**\r\n   * @param {AudioContext} otherCtx\r\n   */\r\n  constructor(input, otherCtx) {\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n\r\n    /** @type {Uint8Array} */\r\n    this.input = input;\r\n    /** @type {Parser} */\r\n    this.parser = null;\r\n    /** @type {number} */\r\n    this.bank = 0;\r\n\r\n    /** @type {string} */\r\n    this.mode = \"\";\r\n\r\n    this.bankSet = [];\r\n    /** @type {number} */\r\n    this.bufferSize = 2048;\r\n    /** @type {AudioContext} */\r\n    this.ctx = otherCtx || this.getAudioContext();\r\n    /** @type {GainNode} */\r\n    this.gainMaster = this.ctx.createGain();\r\n    /** @type {AudioBufferSourceNode} */\r\n    this.bufSrc = this.ctx.createBufferSource();\r\n    /** @type {Array.<number>} */\r\n    this.channelInstrument = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    /** @type {Array.<number>} */\r\n    this.channelBank = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0];\r\n    /** @type {Array.<number>} */\r\n    this.channelVolume = [127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127];\r\n    /** @type {Array.<number>} */\r\n    this.channelPanpot = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n    /** @type {Array.<number>} */\r\n    this.channelPitchBend = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    /** @type {Array.<number>} */\r\n    this.channelPitchBendSensitivity = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];\r\n    /** @type {Array.<number>} */\r\n    this.channelExpression = [127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127];\r\n    /** @type {Array.<number>} */\r\n    this.channelAttack = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n    /** @type {Array.<number>} */\r\n    this.channelDecay = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n    /** @type {Array.<number>} */\r\n    this.channelSustin = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n    /** @type {Array.<number>} */\r\n    this.channelRelease = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n\r\n    /** @type {Array.<boolean>} */\r\n    this.channelHold = [\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ];\r\n    /** @type {Array.<number>} */\r\n    this.channelHarmonicContent = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n    /** @type {Array.<number>} */\r\n    this.channelCutOffFrequency = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];\r\n\r\n    /** @type {boolean} */\r\n    this.isGS = false;\r\n    /** @type {boolean} */\r\n    this.isXG = false;\r\n\r\n    this.programSet = {};\r\n\r\n    /** @type {Array.<boolean>} */\r\n    this.channelMute = [\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ];\r\n    /** @type {Array.<Array.<SynthesizerNote>>} */\r\n    this.currentNoteOn = [\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      []\r\n    ];\r\n    /** @type {number} @const */\r\n    this.baseVolume = 1 / 0xffff;\r\n    /** @type {number} */\r\n    this.masterVolume = 16384;\r\n\r\n    /** @type {Array.<boolean>} */\r\n    this.percussionPart = [\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      true,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ];\r\n\r\n    /** @type {Array.<number>} */\r\n    this.percussionVolume = new Array(128);\r\n    for (i = 0, il = this.percussionVolume.length; i < il; ++i) {\r\n      this.percussionVolume[i] = 127;\r\n    }\r\n\r\n    this.programSet = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AudioContext} ctx\r\n   */\r\n  changeCtx(ctx) {\r\n    this.ctx = ctx;\r\n    this.gainMaster = this.ctx.createGain();\r\n    /** @type {AudioBufferSourceNode} */\r\n    this.bufSrc = this.ctx.createBufferSource();\r\n    this.init(this.mode, true);\r\n  }\r\n\r\n  /**\r\n   * @return {AudioContext}\r\n   */\r\n  getAudioContext() {\r\n    /** @type {AudioContext} */\r\n    // @ts-ignore\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n    // for legacy browsers\r\n    // @ts-ignore\r\n    ctx.createGain = ctx.createGain || ctx.createGainNode;\r\n\r\n    return ctx;\r\n  }\r\n\r\n  /**\r\n   * System Reset\r\n   * @param {boolean} lightweight\r\n   * @param {string} mode\r\n   * @returns {void}\r\n   */\r\n  init(mode = 'GM', lightweight) {\r\n    this.gainMaster.disconnect();\r\n\r\n    /** @type {number} */\r\n    let i;\r\n\r\n    if (!lightweight) {\r\n      this.parser = new Parser(this.input, {\r\n        sampleRate: this.ctx.sampleRate\r\n      });\r\n      this.bankSet = this.createAllInstruments();\r\n    }\r\n\r\n    this.isXG = false;\r\n    this.isGS = false;\r\n    this.mode = mode;\r\n\r\n    if (mode === 'XG') {\r\n      this.isXG = true;\r\n    } else if (mode === 'GS') {\r\n      this.isGS = true;\r\n    }\r\n\r\n    for (i = 0; i < 16; ++i) {\r\n      this.programChange(i, 0x00);\r\n      this.volumeChange(i, 0x64);\r\n      this.panpotChange(i, 0x40);\r\n      this.pitchBend(i, 0x00, 0x40); // 8192\r\n      this.pitchBendSensitivity(i, 2);\r\n      this.channelHold[i] = false;\r\n      this.channelExpression[i] = 127;\r\n      this.channelBank[i] = i === 9 ? 127 : 0;\r\n      this.attackTime(i, 64);\r\n      this.decayTime(i, 64);\r\n      this.sustinTime(i, 64);\r\n      this.releaseTime(i, 64);\r\n      this.harmonicContent(i, 64);\r\n      this.cutOffFrequency(i, 64);\r\n    }\r\n\r\n    this.setPercussionPart(9, true);\r\n\r\n    for (i = 0; i < 128; ++i) {\r\n      this.percussionVolume[i] = 127;\r\n    }\r\n\r\n    this.gainMaster.connect(this.ctx.destination);\r\n    this.input = null;\r\n  }\r\n\r\n  close() {\r\n    this.ctx.close();\r\n  }\r\n\r\n  /**\r\n   * @param {Uint8Array} input\r\n   * @returns {void}\r\n   */\r\n  refreshInstruments(input) {\r\n    this.input = input;\r\n    this.parser = new Parser(input);\r\n    this.bankSet = this.createAllInstruments();\r\n    this.input = null;\r\n  }\r\n\r\n  /** @return {Array.<Array.<Object>>} */\r\n  createAllInstruments() {\r\n    const { parser } = this;\r\n    parser.parse();\r\n\r\n    const presets = parser.createPreset();\r\n    const instruments = parser.createInstrument();\r\n    const banks = [];\r\n    const programSet = [];\r\n\r\n    for (let i = 0; i < presets.length; ++i) {\r\n      const preset = presets[i];\r\n      const presetNumber = preset.header.preset;\r\n      const bankNumber = preset.header.bank;\r\n      const presetName = preset.name.replace(/\\0*$/, '');\r\n\r\n      let globalInstrumentGenerator = {};\r\n      let globalPresetGenerator = {};\r\n\r\n      const globalPresetZone = preset.info[0];\r\n      globalPresetGenerator = globalPresetZone.generator || {};\r\n\r\n      const globalInstrumentId = (globalPresetGenerator.instrument) ? globalPresetGenerator.instrument.amount : null;\r\n      if (globalInstrumentId !== null) {\r\n        const globalInstrument = instruments[globalInstrumentId];\r\n        if (globalInstrument && globalInstrument.info && globalInstrument.info.length > 0) {\r\n\r\n          globalInstrumentGenerator = globalInstrument.info[0].generator || {};\r\n        }\r\n      }\r\n\r\n      const baseGenerator = {\r\n        ...globalInstrumentGenerator,\r\n        ...globalPresetGenerator\r\n      };\r\n\r\n      if (banks[bankNumber] === undefined) {\r\n        banks[bankNumber] = [];\r\n      }\r\n      const bank = banks[bankNumber];\r\n\r\n      for (let j = 1; j < preset.info.length; j++) {\r\n        const specificPresetZone = preset.info[j];\r\n        const specificPresetGenerator = specificPresetZone.generator || {};\r\n\r\n        const specificInstrumentId = (specificPresetGenerator.instrument) ? specificPresetGenerator.instrument.amount : null;\r\n\r\n        if (specificInstrumentId !== null) {\r\n          const specificInstrument = instruments[specificInstrumentId];\r\n          if (specificInstrument && specificInstrument.info) {\r\n            for (const specificInstrumentZone of specificInstrument.info) {\r\n              const specificInstrumentGenerator = specificInstrumentZone.generator || {};\r\n\r\n              const finalGenerator = {\r\n                ...baseGenerator,\r\n                ...globalPresetGenerator,\r\n                ...globalInstrumentGenerator,\r\n                ...specificInstrument.info[0].generator,\r\n                ...specificPresetGenerator,\r\n                ...specificInstrumentGenerator,\r\n              };\r\n\r\n              if (finalGenerator.keyRange) {\r\n                if (!bank[presetNumber]) {\r\n                  bank[presetNumber] = {};\r\n                  bank[presetNumber].name = presetName;\r\n                }\r\n\r\n                this.createNoteInfo(parser, { generator: finalGenerator }, bank[presetNumber]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!programSet[bankNumber]) {\r\n        programSet[bankNumber] = {};\r\n      }\r\n      programSet[bankNumber][presetNumber] ||= presetName;\r\n    }\r\n\r\n    this.programSet = programSet;\r\n    return banks;\r\n  }\r\n\r\n  /**\r\n   * @param {Parser} parser\r\n   * @param {*} info\r\n   * @param {*} preset\r\n   * @returns {void}\r\n   */\r\n  createNoteInfo(parser, info, preset) {\r\n    const generator = info.generator;\r\n\r\n    if (generator.keyRange === undefined || generator.sampleID === undefined) {\r\n      return;\r\n    }\r\n    // console.log(generator);\r\n    /** @type {number} */\r\n    const volDelay = this.getModGenAmount(generator, 'delayVolEnv', -12000);\r\n    /** @type {number} */\r\n    const volAttack = this.getModGenAmount(generator, 'attackVolEnv', -12000);\r\n    /** @type {number} */\r\n    const volHold = this.getModGenAmount(generator, 'holdVolEnv', -12000);\r\n    /** @type {number} */\r\n    const volDecay = this.getModGenAmount(generator, 'decayVolEnv', -12000);\r\n    /** @type {number} */\r\n    const volSustain = this.getModGenAmount(generator, 'sustainVolEnv');\r\n    /** @type {number} */\r\n    const volRelease = this.getModGenAmount(generator, 'releaseVolEnv', -12000);\r\n    /** @type {number} */\r\n    const modDelay = this.getModGenAmount(generator, 'delayModEnv', -12000);\r\n    /** @type {number} */\r\n    const modAttack = this.getModGenAmount(generator, 'attackModEnv', -12000);\r\n    /** @type {number} */\r\n    const modHold = this.getModGenAmount(generator, 'holdModEnv', -12000);\r\n    /** @type {number} */\r\n    const modDecay = this.getModGenAmount(generator, 'decayModEnv', -12000);\r\n    /** @type {number} */\r\n    const modSustain = this.getModGenAmount(generator, 'sustainModEnv');\r\n    /** @type {number} */\r\n    const modRelease = this.getModGenAmount(generator, 'releaseModEnv', -12000);\r\n    /** @type {number} */\r\n    const scale = this.getModGenAmount(generator, 'scaleTuning', 100) / 100;\r\n    /** @type {number} */\r\n    const freqVibLFO = this.getModGenAmount(generator, 'freqVibLFO');\r\n    /** @type {number} */\r\n    const pan = this.getModGenAmount(generator, 'pan');\r\n    /** @type {number} */\r\n    const tune = this.getModGenAmount(generator, 'coarseTune') + this.getModGenAmount(generator, 'fineTune') / 100;\r\n\r\n    const velRange = generator.velRange || { doNotPrefer: true, lo: 0, hi: 127 };\r\n\r\n    for (let i = generator.keyRange.lo, il = generator.keyRange.hi; i <= il; ++i) {\r\n      if (!preset[i]) {\r\n        preset[i] = [];\r\n      }\r\n      /** @type {number} */\r\n      const sampleId = this.getModGenAmount(generator, 'sampleID');\r\n      /** @type {object} */\r\n      const sampleHeader = parser.sampleHeader[sampleId];\r\n\r\n      preset[i].push({\r\n        'velRange': velRange,\r\n        'sample': parser.sample[sampleId],\r\n        'sampleRate': sampleHeader.sampleRate,\r\n        'sampleModes': this.getModGenAmount(generator, 'sampleModes'),\r\n        'basePlaybackRate':\r\n          1.0594630943592953 ** // Math.pow(2, 1 / 12)\r\n          ((\r\n            i -\r\n            this.getModGenAmount(generator, 'overridingRootKey', sampleHeader.originalPitch) +\r\n            tune + (sampleHeader.pitchCorrection / 100)\r\n          ) * scale\r\n          ),\r\n        'modEnvToPitch': this.getModGenAmount(generator, 'modEnvToPitch') / 100,\r\n        'scaleTuning': scale,\r\n        'start': this.getModGenAmount(generator, 'startAddrsCoarseOffset') * 32768 +\r\n          this.getModGenAmount(generator, 'startAddrsOffset'),\r\n        'end': this.getModGenAmount(generator, 'endAddrsCoarseOffset') * 32768 +\r\n          this.getModGenAmount(generator, 'endAddrsOffset'),\r\n        'loopStart': (\r\n          // (sampleHeader.startLoop - sampleHeader.start) +\r\n          (sampleHeader.startLoop) +\r\n          this.getModGenAmount(generator, 'startloopAddrsCoarseOffset') * 32768 +\r\n          this.getModGenAmount(generator, 'startloopAddrsOffset')\r\n        ),\r\n        'loopEnd': (\r\n          // (sampleHeader.endLoop - sampleHeader.start) +\r\n          (sampleHeader.endLoop) +\r\n          this.getModGenAmount(generator, 'endloopAddrsCoarseOffset') * 32768 +\r\n          this.getModGenAmount(generator, 'endloopAddrsOffset')\r\n        ),\r\n        'volDelay': 2 ** (volDelay / 1200),\r\n        'volAttack': 2 ** (volAttack / 1200),\r\n        'volHold': 2 ** (volHold / 1200) *\r\n          2 ** ((60 - i) * this.getModGenAmount(generator, 'keynumToVolEnvHold') / 1200),\r\n        'volDecay': 2 ** (volDecay / 1200) *\r\n          2 ** ((60 - i) * this.getModGenAmount(generator, 'keynumToVolEnvDecay') / 1200),\r\n        'volSustain': volSustain / 1000,\r\n        'volRelease': 2 ** (volRelease / 1200),\r\n        'modDelay': 2 ** (modDelay / 1200),\r\n        'modAttack': 2 ** (modAttack / 1200),\r\n        'modHold': 2 ** (modHold / 1200) *\r\n          2 ** ((60 - i) * this.getModGenAmount(generator, 'keynumToModEnvHold') / 1200),\r\n        'modDecay': 2 ** (modDecay / 1200) *\r\n          2 ** ((60 - i) * this.getModGenAmount(generator, 'keynumToModEnvDecay') / 1200),\r\n        'modSustain': modSustain / 1000,\r\n        'modRelease': 2 ** (modRelease / 1200),\r\n        'initialFilterFc': this.getModGenAmount(generator, 'initialFilterFc', 13500),\r\n        'modEnvToFilterFc': this.getModGenAmount(generator, 'modEnvToFilterFc'),\r\n        'initialFilterQ': this.getModGenAmount(generator, 'initialFilterQ'),\r\n        'initialAttenuation': this.getModGenAmount(generator, 'initialAttenuation'),\r\n        'freqVibLFO': freqVibLFO ? (2 ** (freqVibLFO / 1200)) * 8.176 : undefined,\r\n        'pan': pan ? pan / 1200 : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Object} generator\r\n   * @param {string} enumeratorType\r\n   * @param {number=} optDefault\r\n   * @return {number}\r\n   */\r\n  getModGenAmount(generator, enumeratorType, optDefault = null) {\r\n    return generator[enumeratorType] ? generator[enumeratorType].amount : optDefault;\r\n  }\r\n\r\n  start() {\r\n    this.connect();\r\n    this.bufSrc.start(0);\r\n    this.setMasterVolume(16383);\r\n  }\r\n\r\n  /**\r\n   * @param {number} volume\r\n   * @returns {void}\r\n   */\r\n  setMasterVolume(volume) {\r\n    this.masterVolume = volume;\r\n    this.gainMaster.gain.value = this.baseVolume * (volume / 16384);\r\n  }\r\n\r\n  connect() {\r\n    this.bufSrc.connect(this.gainMaster);\r\n  }\r\n\r\n  disconnect() {\r\n    this.bufSrc.disconnect(this.gainMaster);\r\n    this.bufSrc.buffer = null;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} key\r\n   * @param {number} velocity\r\n   * @returns {void}\r\n   */\r\n  noteOn(channel, key, velocity, simulatedChannel) {\r\n    const bankIndex = this.channelBank[channel];\r\n    /** @type {Object} */\r\n    const bank = (typeof this.bankSet[bankIndex] === 'object') ? this.bankSet[bankIndex] : this.bankSet[0];\r\n    /** @type {Object} */\r\n    let instrument;\r\n\r\n    if (typeof bank[this.channelInstrument[channel]] === 'object') {\r\n      // \u97F3\u8272\u304C\u5B58\u5728\u3059\u308B\u5834\u5408\r\n      instrument = bank[this.channelInstrument[channel]];\r\n    } else if (this.percussionPart[channel] === true) {\r\n      // \u30D1\u30FC\u30AB\u30C3\u30B7\u30E7\u30F3\u30D0\u30F3\u30AF\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u308B\u5834\u5408\u3067\u97F3\u8272\u304C\u5B58\u5728\u3057\u306A\u3044\u5834\u5408Standard Kit\u3092\u9078\u629E\r\n      instrument = this.bankSet[(this.isXG ? 127 : 128)][0];\r\n    } else {\r\n      // \u901A\u5E38\u30D0\u30F3\u30AF\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u308B\u72B6\u614B\u3067\u97F3\u8272\u304C\u5B58\u5728\u3057\u306A\u3044\u5834\u5408\u30D0\u30F3\u30AF0\u3092\u9078\u629E\r\n      instrument = this.bankSet[0][this.channelInstrument[channel]];\r\n    }\r\n\r\n    const instrumentLayers = instrument[key];\r\n    let instrumentKey = null;\r\n\r\n    const matchingSampleData = [];\r\n\r\n    if (instrumentLayers) {\r\n      for (let i = 0, il = instrumentLayers.length; i < il; ++i) {\r\n        const layer = instrumentLayers[i];\r\n        if (velocity >= layer.velRange.lo && velocity <= layer.velRange.hi) {\r\n          instrumentKey = layer;\r\n\r\n          if (!layer.velRange.doNotPrefer) {\r\n            matchingSampleData.push({ sample: layer.sample, pan: layer.pan });\r\n            if (simulatedChannel === -1) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (matchingSampleData.length === 0) {\r\n      matchingSampleData.push({sample: instrumentKey.sample, pan: instrumentKey.pan || 0});\r\n    }\r\n\r\n    if (instrumentKey === null) {\r\n      // TODO\r\n      console.warn(\r\n        'instrument not found: bank=%s instrument=%s channel=%s key=%s velocity=%s',\r\n        bankIndex,\r\n        this.channelInstrument[channel],\r\n        channel,\r\n        key,\r\n        velocity\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    const finalSample = (simulatedChannel === -1) ? null : new Float32Array(matchingSampleData[0].sample.length);\r\n\r\n    if (simulatedChannel !== -1) {\r\n      const temp = new Float32Array(matchingSampleData[0].sample.length);\r\n\r\n      matchingSampleData.forEach(sampleData => {\r\n        temp.set(sampleData.sample);\r\n\r\n        const y = (sampleData.pan + 1) / 2;\r\n        const gain = (simulatedChannel === 0) ? Math.cos(y * Math.PI / 2) : Math.sin(y * Math.PI / 2);\r\n\r\n        for (let i = 0; i < temp.length; i++) {\r\n          finalSample[i] += temp[i] * gain;\r\n        }\r\n      });\r\n    }\r\n\r\n    /** @type {number} */\r\n    let panpot = this.channelPanpot[channel] === 0 ? (Math.random() * 127) | 0 : this.channelPanpot[channel] - 64;\r\n\r\n    panpot /= panpot < 0 ? 64 : 63;\r\n\r\n    // create note information\r\n    instrumentKey.channel = channel;\r\n    instrumentKey.key = key;\r\n    instrumentKey.velocity = velocity;\r\n    instrumentKey.panpot = panpot;\r\n    instrumentKey.volume = this.channelVolume[channel] / 127;\r\n    instrumentKey.pitchBend = this.channelPitchBend[channel] - 8192;\r\n    instrumentKey.expression = this.channelExpression[channel];\r\n    instrumentKey.pitchBendSensitivity = Math.round(this.channelPitchBendSensitivity[channel]);\r\n    instrumentKey.mute = this.channelMute[channel];\r\n    instrumentKey.releaseTime = this.channelRelease[channel];\r\n    instrumentKey.cutOffFrequency = this.cutOffFrequency[channel];\r\n    instrumentKey.harmonicContent = this.harmonicContent[channel];\r\n\r\n    // percussion\r\n    if (bankIndex > 125) {\r\n      if (key === 42 || key === 44) {\r\n        // 42: Closed Hi-Hat\r\n        // 44: Pedal Hi-Hat\r\n        // 46: Open Hi-Hat\r\n        this.noteOff(channel, 46);\r\n      }\r\n      if (key === 80) {\r\n        // 80: Mute Triangle\r\n        // 81: Open Triangle\r\n        this.noteOff(channel, 81);\r\n      }\r\n      instrument.volume *= this.percussionVolume[key] / 127;\r\n    }\r\n\r\n    // note on\r\n    /** @type {SynthesizerNote} */\r\n    const note = new SynthesizerNote(this.ctx, this.gainMaster, instrumentKey, finalSample);\r\n\r\n    note.noteOn();\r\n    this.currentNoteOn[channel].push(note);\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} key\r\n   * @returns {void}\r\n   */\r\n  noteOff(channel, key) {\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n    /** @type {SynthesizerNote} */\r\n    let note;\r\n    /** @type {boolean} */\r\n    const hold = this.channelHold[channel];\r\n\r\n    for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n      note = currentNoteOn[i];\r\n      if (note.key === key) {\r\n        note.noteOff();\r\n        // hold \u3057\u3066\u3044\u308B\u6642\u306F NoteOff \u306B\u306F\u3059\u308B\u304C\u30EA\u30EA\u30FC\u30B9\u306F\u3057\u306A\u3044\r\n        if (!hold) {\r\n          note.release();\r\n          currentNoteOn.splice(i, 1);\r\n          --i;\r\n          --il;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} value\r\n   * @returns {void}\r\n   */\r\n  hold(channel, value) {\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n\r\n    this.channelHold[channel] = !(value < 64);\r\n\r\n    const hold = this.channelHold[channel];\r\n\r\n    /** @type {SynthesizerNote} */\r\n    let note;\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n\r\n    if (!hold) {\r\n      for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n        note = currentNoteOn[i];\r\n        if (note.isNoteOff()) {\r\n          note.release();\r\n          currentNoteOn.splice(i, 1);\r\n          --i;\r\n          --il;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} value\r\n   * @returns {void}\r\n   */\r\n  bankSelectMsb(channel, value) {\r\n    if (this.isXG) {\r\n      this.channelBank[channel] = 0;\r\n      if (value === 64) {\r\n        // Bank Select MSB #64 (Voice Type: SFX)\r\n        this.channelBank[channel] = 125;\r\n        this.percussionPart[channel] = true;\r\n      } else if (value === 126 || value === 127) {\r\n        // Bank Select MSB #126 (Voice Type: Drum)\r\n        // Bank Select MSB #127 (Voice Type: Drum)\r\n        this.channelBank[channel] = value;\r\n        this.percussionPart[channel] = true;\r\n      }\r\n    } else if (this.isGS) {\r\n      this.channelBank[channel] = channel === 9 ? 128 : value;\r\n      this.percussionPart[channel] = value === 128;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel \u30C1\u30E3\u30F3\u30CD\u30EB\u306E\u30D0\u30F3\u30AF\u30BB\u30EC\u30AF\u30C8LSB\r\n   * @param {number} value \u5024\r\n   * @returns {void}\r\n   */\r\n  bankSelectLsb(channel, value) {\r\n    if (!this.isXG || this.percussionPart[channel] === true) {\r\n      return;\r\n    }\r\n\r\n    this.percussionPart[channel] = value >= 125;\r\n    this.channelBank[channel] = value;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} instrument\r\n   * @returns {void}\r\n   */\r\n  programChange(channel, instrument) {\r\n    this.channelInstrument[channel] = instrument;\r\n\r\n    this.bankChange(channel, this.channelBank[channel]);\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} bank\r\n   * @returns {void}\r\n   */\r\n  bankChange(channel, bank) {\r\n    if (typeof this.bankSet[bank] === 'object') {\r\n      this.channelBank[channel] = bank;\r\n    } else if (this.percussionPart[channel]) {\r\n      this.channelBank[channel] = !this.isXG ? 128 : 127;\r\n    } else {\r\n      this.channelBank[channel] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} volume\r\n   * @returns {void}\r\n   */\r\n  volumeChange(channel, volume) {\r\n    this.channelVolume[channel] = volume;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} expression\r\n   * @returns {void}\r\n   */\r\n  expression(channel, expression) {\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n\r\n    for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n      currentNoteOn[i].updateExpression(expression);\r\n    }\r\n\r\n    this.channelExpression[channel] = expression;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} panpot\r\n   * @returns {void}\r\n   */\r\n  panpotChange(channel, panpot) {\r\n    this.channelPanpot[channel] = panpot;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} lowerByte\r\n   * @param {number} higherByte\r\n   * @returns {void}\r\n   */\r\n  pitchBend(channel, lowerByte, higherByte) {\r\n    /** @type {number} */\r\n    const bend = (lowerByte & 0x7f) | ((higherByte & 0x7f) << 7);\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n    /** @type {number} */\r\n    const calculated = bend - 8192;\r\n\r\n    for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n      currentNoteOn[i].updatePitchBend(calculated);\r\n    }\r\n\r\n    this.channelPitchBend[channel] = bend;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel pitch bend sensitivity \u3092\u5909\u66F4\u3059\u308B\u30C1\u30E3\u30F3\u30CD\u30EB.\r\n   * @param {number} sensitivity\r\n   * @returns {void}\r\n   */\r\n  pitchBendSensitivity(channel, sensitivity) {\r\n    this.channelPitchBendSensitivity[channel] = sensitivity;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} attackTime\r\n   * @returns {void}\r\n   */\r\n  attackTime(channel, attackTime) {\r\n    this.channelAttack[channel] = attackTime;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} decayTime\r\n   * @returns {void}\r\n   */\r\n  decayTime(channel, decayTime) {\r\n    this.channelDecay[channel] = decayTime;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} sustinTime\r\n   * @returns {void}\r\n   */\r\n  sustinTime(channel, sustinTime) {\r\n    this.channelSustin[channel] = sustinTime;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} releaseTime\r\n   * @returns {void}\r\n   */\r\n  releaseTime(channel, releaseTime) {\r\n    this.channelRelease[channel] = releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} value\r\n   * @returns {void}\r\n   */\r\n  harmonicContent(channel, value) {\r\n    this.channelHarmonicContent[channel] = value;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {number} value\r\n   * @returns {void}\r\n   */\r\n  cutOffFrequency(channel, value) {\r\n    this.channelCutOffFrequency[channel] = value;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {number} channel pitch bend sensitivity \u3092\u53D6\u5F97\u3059\u308B\u30C1\u30E3\u30F3\u30CD\u30EB.\r\n   * @return {number}\r\n   */\r\n  getPitchBendSensitivity(channel) {\r\n    return this.channelPitchBendSensitivity[channel];\r\n  }\r\n\r\n  /**\r\n   * @param {number} key\r\n   * @param {number} volume\r\n   * @returns {void}\r\n   */\r\n  drumInstrumentLevel(key, volume) {\r\n    this.percussionVolume[key] = volume;\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel NoteOff \u3059\u308B\u30C1\u30E3\u30F3\u30CD\u30EB.\r\n   * @returns {void}\r\n   */\r\n  allNoteOff(channel) {\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n\r\n    // \u30DB\u30FC\u30EB\u30C9\u3092\u89E3\u9664\r\n    this.hold(channel, 0);\r\n\r\n    // \u518D\u751F\u4E2D\u306E\u97F3\u3092\u3059\u3079\u3066\u6B62\u3081\u308B\r\n    while (currentNoteOn.length > 0) {\r\n      this.noteOff(channel, currentNoteOn[0].key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @returns {void}\r\n   */\r\n  allSoundOff(channel) {\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n    /** @type {SynthesizerNote} */\r\n    let note;\r\n\r\n    while (currentNoteOn.length > 0) {\r\n      note = currentNoteOn.shift();\r\n      this.noteOff(channel, note.key);\r\n      note.release();\r\n      note.disconnect();\r\n    }\r\n\r\n    this.hold(channel, 0);\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @returns {void}\r\n   */\r\n  resetAllControl(channel) {\r\n    this.allNoteOff(channel);\r\n    this.expression(channel, 127);\r\n    this.pitchBend(channel, 0x00, 0x40);\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {boolean} mute\r\n   * @returns {void}\r\n   */\r\n  mute(channel, mute) {\r\n    /** @type {Array.<SynthesizerNote>} */\r\n    const currentNoteOn = this.currentNoteOn[channel];\r\n    /** @type {number} */\r\n    let i;\r\n    /** @type {number} */\r\n    let il;\r\n\r\n    this.channelMute[channel] = mute;\r\n\r\n    if (mute) {\r\n      for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n        currentNoteOn[i].disconnect();\r\n      }\r\n    } else {\r\n      for (i = 0, il = currentNoteOn.length; i < il; ++i) {\r\n        currentNoteOn[i].connect();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} channel\r\n   * @param {boolean} sw\r\n   * @returns {void}\r\n   */\r\n  setPercussionPart(channel, sw) {\r\n    if (!this.isXG) {\r\n      this.channelBank[channel] = 128;\r\n    } else {\r\n      this.channelBank[channel] = 127;\r\n    }\r\n    this.percussionPart[channel] = sw;\r\n  }\r\n}\r\n\r\nexport default Synthesizer;\r\n", "import Synthesizer from './sound_font_synth.js';\r\n\r\n/**\r\n * @param {File} file\r\n * @returns {Promise<ArrayBuffer>}\r\n */\r\nfunction readFileAsArrayBuffer (file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => reader.result instanceof ArrayBuffer ?\r\n      resolve(reader.result) :\r\n      reject(new TypeError('File reader did not yield ArrayBuffer.'));\r\n    reader.onerror = error => reject(error);\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  });\r\n}\r\n\r\n/**\r\n * @param {string} url\r\n * @returns {Promise<ArrayBuffer>}\r\n */\r\nasync function fetchResourceAsArrayBuffer (url) {\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Did not get an OK response when fetching resource.');\r\n  }\r\n\r\n  const arrayBuffer = await response.arrayBuffer();\r\n\r\n  return arrayBuffer;\r\n}\r\n\r\n/**\r\n * Wait for passed in variabe to be defined.\r\n *\r\n * @param {any} ref\r\n * @returns {Promise<void>}\r\n */\r\nconst waitForReference = ref => new Promise(resolve => {\r\n  const iid = setInterval(() => {\r\n    if (ref !== undefined) {\r\n      clearInterval(iid);\r\n      resolve();\r\n    }\r\n  }, 16);\r\n});\r\n\r\nglobalThis.SoundFont = class SoundFont {\r\n  constructor () {\r\n    this.synth = undefined;\r\n    this._channel = 0;\r\n    this._bankIndex = 0;\r\n    this._programIndex = 0;\r\n  }\r\n\r\n  set channel (channel) {\r\n    this._channel = channel;\r\n  }\r\n\r\n  /**\r\n   * @param {File} file\r\n   * @returns {Promise<void>}\r\n   */\r\n  async loadSoundFontFromFile (file) {\r\n    const arrayBuffer = await readFileAsArrayBuffer(file);\r\n\r\n    this.bootSynth(arrayBuffer);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} url\r\n   * @returns {Promise<void>}\r\n   */\r\n  async loadSoundFontFromURL (url) {\r\n    const arrayBuffer = await fetchResourceAsArrayBuffer(url);\r\n\r\n    this.bootSynth(arrayBuffer);\r\n  }\r\n\r\n  set bank (index) {\r\n    this._bankIndex = index;\r\n\r\n    this.synth.bankChange(this._channel, index);\r\n  }\r\n\r\n  get banks () {\r\n    return Object.keys(this.synth.programSet).map(id => ({\r\n      id,\r\n      name: ('000' + parseInt(id, 10)).slice(-3)\r\n    }));\r\n  }\r\n\r\n  set program (index) {\r\n    this._programIndex = index;\r\n\r\n    this.synth.programChange(this._channel, index);\r\n  }\r\n\r\n  get programs () {\r\n    const { programSet } = this.synth;\r\n\r\n    return Object.keys(programSet[this._bankIndex]).map(id => ({\r\n      id,\r\n      name: ('000' + (parseInt(id, 10) + 1)).slice(-3) + ':' + programSet[this._bankIndex][id]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @param {ArrayBuffer} arrayBuffer\r\n   * @returns {Promise<void>}\r\n   */\r\n  async bootSynth(arrayBuffer) {\r\n    const input = new Uint8Array(arrayBuffer);\r\n\r\n    if (this.synth) {\r\n      this.synth.refreshInstruments(input);\r\n    } else {\r\n      this.synth = new Synthesizer(input);\r\n\r\n      this.synth.init();\r\n      this.synth.start();\r\n\r\n      await waitForReference(this.synth.programSet);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} midiNumber\r\n   * @param {number} velocity\r\n   * @param {number} channel\r\n   * @returns {void}\r\n   */\r\n  noteOn (midiNumber, velocity = 127, channel, simulatedChannel) {\r\n    this.synth.noteOn(channel ? channel : this._channel, midiNumber, velocity, simulatedChannel ?? -1);\r\n  }\r\n\r\n  /**\r\n   * @param {number} midiNumber\r\n   * @param {number} velocity\r\n   * @param {number} channel\r\n   * @returns {void}\r\n   */\r\n  noteOff (midiNumber, velocity = 127, channel) {\r\n    this.synth.noteOff(channel ? channel : this._channel, midiNumber, velocity);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["Riff", "input", "optParams", "length", "ip", "size", "RiffChunk", "index", "chunk", "type", "offset", "Parser", "input", "optParams", "parser", "Riff", "chunk", "data", "ip", "signature", "firstChunk", "totalSize", "sum", "currentChunk", "presetHeader", "size", "presetZone", "instrument", "instrumentZone", "samples", "sampleHeader", "sampleName", "start", "end", "startLoop", "endLoop", "sampleRate", "originalPitch", "pitchCorrection", "sampleLink", "sampleType", "sample", "adjust", "newSample", "i", "il", "j", "multiply", "code", "key", "output", "dbg", "zone", "bagIndex", "bagIndexEnd", "zoneInfo", "instrumentGenerator", "instrumentModulator", "jl", "preset", "presetGenerator", "presetModulator", "index", "modgen", "indexStart", "indexEnd", "zoneModGen", "modgenInfo", "info", "parser_default", "SynthesizerNote", "ctx", "destination", "instrument", "customBuffer", "now", "volDelay", "modDelay", "volAttack", "modAttack", "volHold", "modHold", "volDecay", "modDecay", "loopStart", "loopEnd", "startTime", "pan", "sample", "buffer", "bufferSource", "output", "volume", "outputGain", "baseFreq", "peekFreq", "sustainFreq", "modulator", "val", "release", "volEndTimeTmp", "volEndTime", "modEndTime", "playbackRate", "computed", "start", "peekPitch", "expression", "pitchBend", "sound_font_synth_note_default", "Synthesizer", "input", "otherCtx", "i", "il", "ctx", "mode", "lightweight", "parser_default", "parser", "presets", "instruments", "banks", "programSet", "preset", "presetNumber", "bankNumber", "presetName", "globalInstrumentGenerator", "globalPresetGenerator", "globalInstrumentId", "globalInstrument", "baseGenerator", "bank", "j", "specificPresetGenerator", "specificInstrumentId", "specificInstrument", "specificInstrumentZone", "specificInstrumentGenerator", "finalGenerator", "info", "generator", "volDelay", "volAttack", "volHold", "volDecay", "volSustain", "volRelease", "modDelay", "modAttack", "modHold", "modDecay", "modSustain", "modRelease", "scale", "freqVibLFO", "pan", "tune", "velRange", "sampleId", "sampleHeader", "enumeratorType", "optDefault", "volume", "channel", "key", "velocity", "simulatedChannel", "bankIndex", "instrument", "instrumentLayers", "instrumentKey", "matchingSampleData", "layer", "finalSample", "temp", "sampleData", "y", "gain", "panpot", "note", "sound_font_synth_note_default", "currentNoteOn", "hold", "value", "expression", "lowerByte", "higherByte", "bend", "calculated", "sensitivity", "attackTime", "decayTime", "sustinTime", "releaseTime", "mute", "sw", "sound_font_synth_default", "readFileAsArrayBuffer", "file", "resolve", "reject", "reader", "error", "fetchResourceAsArrayBuffer", "url", "response", "waitForReference", "ref", "iid", "channel", "arrayBuffer", "index", "id", "programSet", "input", "sound_font_synth_default", "midiNumber", "velocity", "simulatedChannel"]
}
