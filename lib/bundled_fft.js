//FFT module by ZXMushroom63 using wasm
// build w/ assemblyscript
// feel free to use in projects
(async function FFTModule() {
    async function fftInstantiate(module, imports = {}) {
        const adaptedImports = {
            env: Object.setPrototypeOf({
                abort(message, fileName, lineNumber, columnNumber) {
                    // ~lib/builtins/abort(~lib/string/String | null?, ~lib/string/String | null?, u32?, u32?) => void
                    message = __liftString(message >>> 0);
                    fileName = __liftString(fileName >>> 0);
                    lineNumber = lineNumber >>> 0;
                    columnNumber = columnNumber >>> 0;
                    (() => {
                        // @external.js
                        throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);
                    })();
                },
            }, Object.assign(Object.create(globalThis), imports.env || {})),
        };
        const { exports } = await WebAssembly.instantiate(module, adaptedImports);
        const memory = exports.memory || imports.env.memory;
        const adaptedExports = Object.setPrototypeOf({
            fft(real, imag) {
                // fft/fft(~lib/typedarray/Float32Array, ~lib/typedarray/Float32Array) => ~lib/array/Array<~lib/typedarray/Float32Array>
                real = __retain(__lowerTypedArray(Float32Array, 4, 2, real) || __notnull());
                imag = __lowerTypedArray(Float32Array, 4, 2, imag) || __notnull();
                try {
                    return __liftArray(pointer => __liftTypedArray(Float32Array, __getU32(pointer)), 2, exports.fft(real, imag) >>> 0);
                } finally {
                    __release(real);
                }
            },
            ifft(real, imag) {
                // fft/ifft(~lib/typedarray/Float32Array, ~lib/typedarray/Float32Array) => ~lib/array/Array<~lib/typedarray/Float32Array>
                real = __retain(__lowerTypedArray(Float32Array, 4, 2, real) || __notnull());
                imag = __lowerTypedArray(Float32Array, 4, 2, imag) || __notnull();
                try {
                    return __liftArray(pointer => __liftTypedArray(Float32Array, __getU32(pointer)), 2, exports.ifft(real, imag) >>> 0);
                } finally {
                    __release(real);
                }
            },
        }, exports);
        function __liftString(pointer) {
            if (!pointer) return null;
            const
                end = pointer + new Uint32Array(memory.buffer)[pointer - 4 >>> 2] >>> 1,
                memoryU16 = new Uint16Array(memory.buffer);
            let
                start = pointer >>> 1,
                string = "";
            while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));
            return string + String.fromCharCode(...memoryU16.subarray(start, end));
        }
        function __liftArray(liftElement, align, pointer) {
            if (!pointer) return null;
            const
                dataStart = __getU32(pointer + 4),
                length = __dataview.getUint32(pointer + 12, true),
                values = new Array(length);
            for (let i = 0; i < length; ++i) values[i] = liftElement(dataStart + (i << align >>> 0));
            return values;
        }
        function __liftTypedArray(constructor, pointer) {
            if (!pointer) return null;
            return new constructor(
                memory.buffer,
                __getU32(pointer + 4),
                __dataview.getUint32(pointer + 8, true) / constructor.BYTES_PER_ELEMENT
            ).slice();
        }
        function __lowerTypedArray(constructor, id, align, values) {
            if (values == null) return 0;
            const
                length = values.length,
                buffer = exports.__pin(exports.__new(length << align, 1)) >>> 0,
                header = exports.__new(12, id) >>> 0;
            __setU32(header + 0, buffer);
            __dataview.setUint32(header + 4, buffer, true);
            __dataview.setUint32(header + 8, length << align, true);
            new constructor(memory.buffer, buffer, length).set(values);
            exports.__unpin(buffer);
            return header;
        }
        const refcounts = new Map();
        function __retain(pointer) {
            if (pointer) {
                const refcount = refcounts.get(pointer);
                if (refcount) refcounts.set(pointer, refcount + 1);
                else refcounts.set(exports.__pin(pointer), 1);
            }
            return pointer;
        }
        function __release(pointer) {
            if (pointer) {
                const refcount = refcounts.get(pointer);
                if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);
                else if (refcount) refcounts.set(pointer, refcount - 1);
                else throw Error(`invalid refcount '${refcount}' for reference '${pointer}'`);
            }
        }
        function __notnull() {
            throw TypeError("value must not be null");
        }
        let __dataview = new DataView(memory.buffer);
        function __setU32(pointer, value) {
            try {
                __dataview.setUint32(pointer, value, true);
            } catch {
                __dataview = new DataView(memory.buffer);
                __dataview.setUint32(pointer, value, true);
            }
        }
        function __getU32(pointer) {
            try {
                return __dataview.getUint32(pointer, true);
            } catch {
                __dataview = new DataView(memory.buffer);
                return __dataview.getUint32(pointer, true);
            }
        }
        return adaptedExports;
    }


    const fftModule = await WebAssembly.compileStreaming(fetch("data:application/wasm;base64,AGFzbQEAAAABRQ1gAn9/AX9gAX8AYAAAYAF/AX9gAn9/AGAAAX9gA39/fwBgAXwBfGAEf39/fwBgA39/fgBgAX4Bf2ACf38BfWADf399AAINAQNlbnYFYWJvcnQACAMgHwIBAQEEBAkCBQAABgoHBwMBAgECAwMGAwsMAAAFAAAFAwEAAQZdD38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfAFEAAAAAAAAAAALfAFEAAAAAAAAAAALfgFCAAt/AEHQEAt/AUHwkAILB0sIBV9fbmV3AAsFX19waW4AEAdfX3VucGluABEJX19jb2xsZWN0ABILX19ydHRpX2Jhc2UDDQZtZW1vcnkCAANmZnQAHgRpZmZ0AB8IARQMARoK/0IfZwECf0HgCRAEQeALEARB4A4QBEGgCBAEQeAPEARBoBAQBCMEIgEoAgRBfHEhAANAIAAgAUcEQCAAKAIEQQNxQQNHBEBBAEHgCEGgAUEQEAAACyAAQRRqEBMgACgCBEF8cSEADAELCwthAQF/IAAoAgRBfHEiAUUEQCAAKAIIRSAAQfCQAklxRQRAQQBB4AhBgAFBEhAAAAsPCyAAKAIIIgBFBEBBAEHgCEGEAUEQEAAACyABIAA2AgggACABIAAoAgRBA3FyNgIEC58BAQN/IAAjBUYEQCAAKAIIIgFFBEBBAEHgCEGUAUEeEAAACyABJAULIAAQAiMGIQEgACgCDCICQQJNBH9BAQUgAkHQECgCAEsEQEHgCUGgCkEVQRwQAAALIAJBAnRB1BBqKAIAQSBxCyEDIAEoAgghAiAAIwdFQQIgAxsgAXI2AgQgACACNgIIIAIgACACKAIEQQNxcjYCBCABIAA2AggLJwAgAEUEQA8LIwcgAEEUayIAKAIEQQNxRgRAIAAQAyMDQQFqJAMLC4oCAQR/IAEoAgAiA0EBcUUEQEEAQfAKQYwCQQ4QAAALIANBfHEiA0EMSQRAQQBB8ApBjgJBDhAAAAsgA0GAAkkEfyADQQR2BUEfQfz///8DIAMgA0H8////A08bIgNnayIEQQdrIQIgAyAEQQRrdkEQcwsiA0EQSSACQRdJcUUEQEEAQfAKQZwCQQ4QAAALIAEoAgghBSABKAIEIgQEQCAEIAU2AggLIAUEQCAFIAQ2AgQLIAEgACACQQR0IANqQQJ0aiIBKAJgRgRAIAEgBTYCYCAFRQRAIAAgAkECdGoiASgCBEF+IAN3cSEDIAEgAzYCBCADRQRAIAAgACgCAEF+IAJ3cTYCAAsLCwvDAwEFfyABRQRAQQBB8ApByQFBDhAAAAsgASgCACIDQQFxRQRAQQBB8ApBywFBDhAAAAsgAUEEaiABKAIAQXxxaiIEKAIAIgJBAXEEQCAAIAQQBSABIANBBGogAkF8cWoiAzYCACABQQRqIAEoAgBBfHFqIgQoAgAhAgsgA0ECcQRAIAFBBGsoAgAiASgCACIGQQFxRQRAQQBB8ApB3QFBEBAAAAsgACABEAUgASAGQQRqIANBfHFqIgM2AgALIAQgAkECcjYCACADQXxxIgJBDEkEQEEAQfAKQekBQQ4QAAALIAQgAUEEaiACakcEQEEAQfAKQeoBQQ4QAAALIARBBGsgATYCACACQYACSQR/IAJBBHYFQR9B/P///wMgAiACQfz///8DTxsiAmdrIgNBB2shBSACIANBBGt2QRBzCyICQRBJIAVBF0lxRQRAQQBB8ApB+wFBDhAAAAsgACAFQQR0IAJqQQJ0aigCYCEDIAFBADYCBCABIAM2AgggAwRAIAMgATYCBAsgACAFQQR0IAJqQQJ0aiABNgJgIAAgACgCAEEBIAV0cjYCACAAIAVBAnRqIgAgACgCBEEBIAJ0cjYCBAvOAQEDfyACIAGtVARAQQBB8ApB/gJBDhAAAAsgAUETakFwcUEEayEBIAAoAqAMIgMEQCADQQRqIAFLBEBBAEHwCkGFA0EQEAAACyADIAFBEGsiBUYEQCADKAIAIQQgBSEBCwUgAEGkDGogAUsEQEEAQfAKQZIDQQUQAAALCyACp0FwcSABayIDQRRJBEAPCyABIARBAnEgA0EIayIDQQFycjYCACABQQA2AgQgAUEANgIIIAFBBGogA2oiA0ECNgIAIAAgAzYCoAwgACABEAYLlwEBAn8/ACIBQQBMBH9BASABa0AAQQBIBUEACwRAAAtB8JACQQA2AgBBkJ0CQQA2AgADQCAAQRdJBEAgAEECdEHwkAJqQQA2AgRBACEBA0AgAUEQSQRAIABBBHQgAWpBAnRB8JACakEANgJgIAFBAWohAQwBCwsgAEEBaiEADAELC0HwkAJBlJ0CPwCsQhCGEAdB8JACJAkL4QMBA38CQAJAAkACQCMCDgMAAQIDC0EBJAJBACQDEAEjBiQFIwMPCyMHRSEBIwUoAgRBfHEhAANAIAAjBkcEQCAAJAUgASAAKAIEIgJBA3FHBEAgACACQXxxIAFyNgIEQQAkAyAAQRRqEBMjAw8LIAAoAgRBfHEhAAwBCwtBACQDEAEjBiMFKAIEQXxxRgRAIw4hAANAIABB8JACSQRAIAAoAgAQBCAAQQRqIQAMAQsLIwUoAgRBfHEhAANAIAAjBkcEQCABIAAoAgQiAkEDcUcEQCAAIAJBfHEgAXI2AgQgAEEUahATCyAAKAIEQXxxIQAMAQsLIwghACMGJAggACQGIAEkByAAKAIEQXxxJAVBAiQCCyMDDwsjBSIAIwZHBEAgACgCBCIBQXxxJAUjB0UgAUEDcUcEQEEAQeAIQeUBQRQQAAALIABB8JACSQRAIABBADYCBCAAQQA2AggFIwAgACgCAEF8cUEEamskACAAQQRqIgBB8JACTwRAIwlFBEAQCAsjCSAAQQRrIQIgAEEPcUEBIAAbBH9BAQUgAigCAEEBcQsEQEEAQfAKQbIEQQMQAAALIAIgAigCAEEBcjYCACACEAYLC0EKDwsjBiMGNgIEIwYjBjYCCEEAJAILQQAL2gEBAX8gAUGAAkkEQCABQQR2IQEFIAFB/v///wFJBEAgAUEBQRsgAWdrdGpBAWshAQsgAUEfIAFnayICQQRrdkEQcyEBIAJBB2shAgsgAUEQSSACQRdJcUUEQEEAQfAKQc4CQQ4QAAALIAAgAkECdGooAgRBfyABdHEiAQR/IAAgAWggAkEEdGpBAnRqKAJgBSAAKAIAQX8gAkEBanRxIgEEfyAAIAFoIgFBAnRqKAIEIgJFBEBBAEHwCkHbAkESEAAACyAAIAJoIAFBBHRqQQJ0aigCYAVBAAsLC8UEAQV/IABB7P///wNPBEBBoAhB4AhBhQJBHxAAAAsjACMBTwRAAkBBgBAhAgNAIAIQCWshAiMCRQRAIwCtQsgBfkLkAICnQYAIaiQBDAILIAJBAEoNAAsjACMAIwFrQYAISUEKdGokAQsLIwlFBEAQCAsjCSEEIABBEGoiAkH8////A0sEQEGgCEHwCkHNA0EdEAAACyAEIAJBDE0Ef0EMBSACQRNqQXBxQQRrCyIFEAoiAkUEQD8AIgIgBUGAAk8EfyAFQf7///8BSQR/IAVBAUEbIAVna3RqQQFrBSAFCwUgBQtBBCAEKAKgDCACQRB0QQRrR3RqQf//A2pBgIB8cUEQdiIDIAIgA0obQABBAEgEQCADQABBAEgEQAALCyAEIAJBEHQ/AKxCEIYQByAEIAUQCiICRQRAQQBB8ApB8wNBEBAAAAsLIAUgAigCAEF8cUsEQEEAQfAKQfUDQQ4QAAALIAQgAhAFIAIoAgAhBiAFQQRqQQ9xBEBBAEHwCkHpAkEOEAAACyAGQXxxIAVrIgNBEE8EQCACIAUgBkECcXI2AgAgAkEEaiAFaiIFIANBBGtBAXI2AgAgBCAFEAYFIAIgBkF+cTYCACACQQRqIAIoAgBBfHFqIgMgAygCAEF9cTYCAAsgAiABNgIMIAIgADYCECMIIgEoAgghAyACIAEjB3I2AgQgAiADNgIIIAMgAiADKAIEQQNxcjYCBCABIAI2AggjACACKAIAQXxxQQRqaiQAIAJBFGoiAUEAIAD8CwAgAQtjAQF/IAFFBEAPCyAARQRAQQBB4AhBpwJBDhAAAAsjByABQRRrIgEoAgRBA3FGBEAgAEEUayIAKAIEQQNxIgMjB0VGBEAgACABIAIbEAMFIwJBAUYgA0EDRnEEQCABEAMLCwsLrgQDCn4BfwF8IABC////////////AINCNIhClQh9IgFCP4MhBCABQgaHp0EDdEGADWoiCykDACEDIAspAwghAiALKQMQIQEgBEIAUgRAIAMgBIYgAkLAACAEfSIFiIQhAyACIASGIAEgBYiEIQIgASAEhiALKQMYIAWIhCEBCyAAQv////////8Hg0KAgICAgICACIQiBEL/////D4MhBSACQv////8PgyIGIARCIIgiB34gAkIgiCICIAV+IAUgBn4iBUIgiHwiBkL/////D4N8IQggAiAHfiAGQiCIfCAIQiCIfCQMIAcgAUIgiH4iASAFQv////8PgyAIQiCGfHwiAiABVK0jDCADIAR+fHwiA0IChiACQj6IhCIEQj+HIgUgAkIChoUhAiAEIAVCAYeFIgF5IQYgASAGhiACQsAAIAZ9iIQiB0L/////D4MhASAHQiCIIghCtISjiwJ+IAFCorW/yAx+IAFCtISjiwJ+IglCIIh8IgpC/////w+DfCEBIAhCorW/yAx+IApCIIh8IAFCIIh8JAwgB7pEhBtwUcyYOD+iIAIgBoa6RBgtRFT7ITk/oqD8ByICIAlC/////w+DIAFCIIZ8IgFWrSMMIgdCC4h8uiQKIAdCNYYgAUILiIQgAny6RAAAAAAAAPA7oiQLIwpCgICAgICAgNg8IAZCNIZ9IAAgBIVCgICAgICAgICAf4OEvyIMoiQKIwsgDKIkCyADQj6HIAV9pwvvBwMFfAN/AX4gAL0iCUIgiKciBkEfdiEIIAZB/////wdxIgZB+8Ok/wNNBEAgBkGewZryA0kEQEQAAAAAAADwPw8LIAAgAKIiASABoiECRAAAAAAAAPA/IAFEAAAAAAAA4D+iIgOhIgREAAAAAAAA8D8gBKEgA6EgASABIAEgAUSQFcsZoAH6PqJEd1HBFmzBVr+gokRMVVVVVVWlP6CiIAIgAqIgASABRNQ4iL7p+qi9okTEsbS9nu4hPqCiRK1SnIBPfpK+oKKgoiAARAAAAAAAAAAAoqGgoA8LIAZBgIDA/wdPBEAgACAAoQ8LAn8gCUIgiKdB/////wdxIgdB/LKLgARJBEBBASEGIAgEfCAARAAAQFT7Ifk/oCEAQX8hBiAHQfvD5P8DRwR8IAAgAEQxY2IaYbTQPaAiAKFEMWNiGmG00D2gBSAARAAAYBphtNA9oCIBRHNwAy6KGaM7oCEAIAEgAKFEc3ADLooZozugCwUgAEQAAEBU+yH5v6AhACAHQfvD5P8DRwR8IAAgAEQxY2IaYbTQvaAiAKFEMWNiGmG00L2gBSAARAAAYBphtNC9oCIBRHNwAy6KGaO7oCEAIAEgAKFEc3ADLooZo7ugCwsgACQKJAsgBgwBCyAHQfvD5IkESQRAIAdBFHYiBiAAIABEg8jJbTBf5D+iniIDRAAAQFT7Ifk/oqEiACADRDFjYhphtNA9oiICoSIBvUIgiKdBFHZB/w9xa0EQSwRAIANEc3ADLooZozuiIAAgACADRAAAYBphtNA9oiIBoSIAoSABoaEhAiAGIAAgAqEiAb1CIIinQRR2Qf8PcWtBMUsEQCADRMFJICWag3s5oiAAIAAgA0QAAAAuihmjO6IiAaEiAKEgAaGhIQIgACACoSEBCwsgASQKIAAgAaEgAqEkCyAD/AIMAQtBACAJEA0iBmsgBiAIGwshBiMKIQEjCyECIAZBAXEEfCABIAGiIgAgAaIhAyABIAAgAkQAAAAAAADgP6IgAyAAIABEff6xV+Mdxz6iRNVhwRmgASq/oKJEpvgQERERgT+gIAAgACAAoqIgAER81c9aOtnlPaJE65wriublWr6goqCioaIgAqEgA0RJVVVVVVXFv6KhoQUgASABoiIDIAOiIQREAAAAAAAA8D8gA0QAAAAAAADgP6IiAKEiBUQAAAAAAADwPyAFoSAAoSADIAMgAyADRJAVyxmgAfo+okR3UcEWbMFWv6CiRExVVVVVVaU/oKIgBCAEoiADIANE1DiIvun6qL2iRMSxtL2e7iE+oKJErVKcgE9+kr6goqCiIAEgAqKhoKALIgCaIAAgBkEBakECcRsLrAcDBXwDfwF+IAC9IglCIIinIgZBH3YhCCAGQf////8HcSIGQfvDpP8DTQRAIAZBgIDA8gNJBEAgAA8LIAAgACAAoiIBIACiIAEgASABRH3+sVfjHcc+okTVYcEZoAEqv6CiRKb4EBEREYE/oCABIAEgAaKiIAFEfNXPWjrZ5T2iROucK4rm5Vq+oKKgokRJVVVVVVXFv6CioA8LIAZBgIDA/wdPBEAgACAAoQ8LAn8gCUIgiKdB/////wdxIgdB/LKLgARJBEBBASEGIAgEfCAARAAAQFT7Ifk/oCEAQX8hBiAHQfvD5P8DRwR8IAAgAEQxY2IaYbTQPaAiAKFEMWNiGmG00D2gBSAARAAAYBphtNA9oCIBRHNwAy6KGaM7oCEAIAEgAKFEc3ADLooZozugCwUgAEQAAEBU+yH5v6AhACAHQfvD5P8DRwR8IAAgAEQxY2IaYbTQvaAiAKFEMWNiGmG00L2gBSAARAAAYBphtNC9oCIBRHNwAy6KGaO7oCEAIAEgAKFEc3ADLooZo7ugCwsgACQKJAsgBgwBCyAHQfvD5IkESQRAIAdBFHYiBiAAIABEg8jJbTBf5D+iniIDRAAAQFT7Ifk/oqEiACADRDFjYhphtNA9oiICoSIBvUIgiKdBFHZB/w9xa0EQSwRAIANEc3ADLooZozuiIAAgACADRAAAYBphtNA9oiIBoSIAoSABoaEhAiAGIAAgAqEiAb1CIIinQRR2Qf8PcWtBMUsEQCADRMFJICWag3s5oiAAIAAgA0QAAAAuihmjO6IiAaEiAKEgAaGhIQIgACACoSEBCwsgASQKIAAgAaEgAqEkCyAD/AIMAQtBACAJEA0iBmsgBiAIGwshBiMKIQIjCyEDIAZBAXEEfCACIAKiIgAgAKIhAUQAAAAAAADwPyAARAAAAAAAAOA/oiIEoSIFRAAAAAAAAPA/IAWhIAShIAAgACAAIABEkBXLGaAB+j6iRHdRwRZswVa/oKJETFVVVVVVpT+goiABIAGiIAAgAETUOIi+6fqovaJExLG0vZ7uIT6gokStUpyAT36SvqCioKIgAiADoqGgoAUgAiACoiIAIAKiIQEgAiAAIANEAAAAAAAA4D+iIAEgACAARH3+sVfjHcc+okTVYcEZoAEqv6CiRKb4EBEREYE/oCAAIAAgAKKiIABEfNXPWjrZ5T2iROucK4rm5Vq+oKKgoqGiIAOhIAFESVVVVVVVxb+ioaELIgCaIAAgBkECcRsLYQEDfyAABEAgAEEUayIBKAIEQQNxQQNGBEBB4A9B4AhB0gJBBxAAAAsgARACIwQiAygCCCECIAEgA0EDcjYCBCABIAI2AgggAiABIAIoAgRBA3FyNgIEIAMgATYCCAsgAAtuAQJ/IABFBEAPCyAAQRRrIgEoAgRBA3FBA0cEQEGgEEHgCEHgAkEFEAAACyMCQQFGBEAgARADBSABEAIjCCIAKAIIIQIgASAAIwdyNgIEIAEgAjYCCCACIAEgAigCBEEDcXI2AgQgACABNgIICws5ACMCQQBKBEADQCMCBEAQCRoMAQsLCxAJGgNAIwIEQBAJGgwBCwsjAK1CyAF+QuQAgKdBgAhqJAEL3AEBA38CQAJAAkACQAJAAkACQAJAAkAgAEEIaygCAA4HAAECCAgDBAULDwsPCw8LIw5BBGskDiMOQfAQSA0CIw5BADYCACMOIAA2AgAgACgCBCEBIw4gADYCACABIAAoAgxBAnRqIQIDQCABIAJJBEAgASgCACIDBEAgAxAECyABQQRqIQEMAQsLDAMLIw5BBGskDiMOQfAQSA0BIw5BADYCAAwCCwALQZCRAkHAkQJBAUEBEAAACyMOIAA2AgAgACgCABAEIw5BBGokDg8LIAAoAgAiAARAIAAQBAsLVgA/AEEQdEHwkAJrQQF2JAFBlAlBkAk2AgBBmAlBkAk2AgBBkAkkBEG0CUGwCTYCAEG4CUGwCTYCAEGwCSQGQcQKQcAKNgIAQcgKQcAKNgIAQcAKJAgLPgAjDkEEayQOIw5B8BBIBEBBkJECQcCRAkEBQQEQAAALIw5BADYCACMOIAA2AgAgACgCCEECdiMOQQRqJA4LtgEBA38jDkEMayQOIw5B8BBIBEBBkJECQcCRAkEBQQEQAAALIw5CADcDACMOQQA2AggjDiAANgIAIw4gADYCBCAAEBUhAyMOQQxBBBALIgE2AggjDiAANgIEIAEgACgCACICNgIAIAEgAkEAEAwjDiAANgIEIAEgACgCBCADQQAgA0EATBsiAEECdGo2AgQgAUEBIAMgA0EBShsiAiAAIAAgAkgbIABrQQJ0NgIIIw5BDGokDiABC4QDAQV/Iw5BBGskDgJAIw5B8BBIDQAjDkEANgIAIw4gADYCACABIAAoAgxPBEAgAUEASARAQeAJQbALQYIBQRYQAAALIAFBAWoiBiEDIw5BBGskDiMOQfAQSA0BIw5BADYCACMOIAA2AgAgAyAAKAIIIgRBAnZLBEAgA0H/////AEsEQEHgC0GwC0ETQTAQAAALIw4gADYCAAJAQfz///8DIARBAXQiBCAEQfz///8DTxsiBEEIIAMgA0EITRtBAnQiAyADIARJGyIFIAAoAgAiBEEUayIHKAIAQXxxQRBrTQRAIAcgBTYCECAEIQMMAQsgBSAHKAIMEAsiAyAEIAUgBygCECIHIAUgB0kb/AoAAAsgAyAERwRAIAAgAzYCACAAIAM2AgQgACADQQAQDAsgACAFNgIICyMOQQRqJA4jDiAANgIAIAAgBjYCDAsjDiAANgIAIAAoAgQgAUECdGogAjYCACAAIAJBARAMIw5BBGokDg8LQZCRAkHAkQJBAUEBEAAAC54CAQN/Iw5BCGskDgJAIw5B8BBIDQAjDkIANwMAIw5BDEEEEAsiATYCACMOIw4gATYCBCMOQRBrJA4jDkHwEEgNACMOQgA3AwAjDkIANwMIIAFFBEAjDkEMQQMQCyIBNgIACyMOIAE2AgQgAUEANgIAIAFBAEEAEAwjDiABNgIEIAFBADYCBCMOIAE2AgQgAUEANgIIIABB/////wBLBEBB4AtBkAxBE0E5EAAACyMOIABBAnQiAEEBEAsiAzYCCCMOIAE2AgQjDiADNgIMIAEgAzYCACABIANBABAMIw4gATYCBCABIAM2AgQjDiABNgIEIAEgADYCCCMOQRBqJA4gATYCACMOQQhqJA4gAQ8LQZCRAkHAkQJBAUEBEAAAC2oBAX0jDkEEayQOIw5B8BBIBEBBkJECQcCRAkEBQQEQAAALIw5BADYCACMOIAA2AgAgASAAKAIIQQJ2TwRAQeAJQdAMQZgKQcAAEAAACyMOIAA2AgAgACgCBCABQQJ0aioCACMOQQRqJA4LagAjDkEEayQOIw5B8BBIBEBBkJECQcCRAkEBQQEQAAALIw5BADYCACMOIAA2AgAgASAAKAIIQQJ2TwRAQeAJQdAMQaMKQcAAEAAACyMOIAA2AgAgACgCBCABQQJ0aiACOAIAIw5BBGokDguBAQAjDkEIayQOIw5B8BBIBEBBkJECQcCRAkEBQQEQAAALIw5CADcDACMOIAA2AgAgASAAKAIMTwRAQeAJQbALQfIAQSoQAAALIw4gADYCACMOIAAoAgQgAUECdGooAgAiADYCBCAARQRAQeAOQbALQfYAQSgQAAALIw5BCGokDiAAC44GAwh/A30BfCMOQTRrJA4jDkHwEEgEQEGQkQJBwJECQQFBARAAAAsjDkEAQTT8CwAjDiAANgIAIAAQFSIEQQFGBEAjDhAdIgI2AgQjDiAANgIAIAJBACAAEBYQFyMOIAE2AgAgAkEBIAEQFhAXIw5BNGokDiACDwsjDiAEQQF1IgMQGCIFNgIIIw4gAxAYIgY2AgwjDiADEBgiBzYCECMOIAMQGCIINgIUA0AgAiADSARAIw4gBTYCACMOIAA2AhggBSACIAAgAkEBdCIJEBkQGiMOIAY2AgAjDiABNgIYIAYgAiABIAkQGRAaIw4gBzYCACMOIAA2AhggByACIAAgCUEBaiIJEBkQGiMOIAg2AgAjDiABNgIYIAggAiABIAkQGRAaIAJBAWohAgwBCwsjDiAFNgIAIw4gBjYCGCMOIAUgBhAcIgE2AhwjDiAHNgIAIw4gCDYCGCMOIAcgCBAcIgI2AiAjDiAEEBgiBTYCJCMOIAQQGCIGNgIoQQAhAANAIAAgA0gEQCAAt0QYLURU+yEZQKIgBLejtrsiDRAOtiEKIA0QD5q2IQsjDiACNgIYIAJBABAbIQcjDiAHNgIAIAogByAAEBmUIw4gAjYCGCACQQEQGyEHIw4gBzYCACALIAcgABAZlJMhDCMOIAI2AhggAkEBEBshByMOIAc2AgAgCiAHIAAQGZQjDiACNgIYIAJBABAbIQcjDiAHNgIAIAsgByAAEBmUkiEKIw4gBTYCACMOIAE2AiwgAUEAEBshByMOIAc2AhggBSAAIAcgABAZIAySEBojDiAGNgIAIw4gATYCLCABQQEQGyEHIw4gBzYCGCAGIAAgByAAEBkgCpIQGiMOIAU2AgAjDiABNgIsIAFBABAbIQcjDiAHNgIYIAUgACADaiIIIAcgABAZIAyTEBojDiAGNgIAIw4gATYCLCABQQEQGyEHIw4gBzYCGCAGIAggByAAEBkgCpMQGiAAQQFqIQAMAQsLIw4QHSIANgIwIABBACAFEBcgAEEBIAYQFyMOQTRqJA4gAAtqAQJ/Iw5BBGskDiMOQfAQSARAQZCRAkHAkQJBAUEBEAAACyMOQQA2AgAjDkEIQQEQCyIBNgIAQRBBBRALIgAgATYCACAAIAFBABAMIAAgATYCBCAAQQg2AgggAEECNgIMIw5BBGokDiAACzwAIw5BCGskDiMOQfAQSARAQZCRAkHAkQJBAUEBEAAACyMOIAA2AgAjDiABNgIEIAAgARAcIw5BCGokDguIAwIEfwF9Iw5BCGskDgJAIw5B8BBIDQAjDiAANgIAIw4gATYCBCMOQSRrJA4jDkHwEEgNACMOQQBBJPwLACMOIAA2AgAgABAVIgOyIQYjDiADEBgiBDYCBCMOIAMQGCIFNgIIA0AgAiADSARAIw4gBDYCACMOIAA2AgwgBCACIAAgAhAZEBojDiAFNgIAIw4gATYCDCAFIAIgASACEBmMEBogAkEBaiECDAELCyMOIAQ2AgAjDiAFNgIMIw4gBCAFEBwiATYCECMOIAMQGCICNgIUIw4gAxAYIgQ2AhhBACEAA0AgACADSARAIw4gAjYCACMOIAE2AhwgAUEAEBshBSMOIAU2AgwgAiAAIAUgABAZIAaVEBojDiAENgIAIw4gATYCHCABQQEQGyEFIw4gBTYCDCAEIAAgBSAAEBmMIAaVEBogAEEBaiEADAELCyMOEB0iADYCICAAQQAgAhAXIABBASAEEBcjDkEkaiQOIw5BCGokDiAADwtBkJECQcCRAkEBQQEQAAALC6oHGgBBjAgLATwAQZgICy8CAAAAKAAAAEEAbABsAG8AYwBhAHQAaQBvAG4AIAB0AG8AbwAgAGwAYQByAGcAZQBBzAgLATwAQdgICycCAAAAIAAAAH4AbABpAGIALwByAHQALwBpAHQAYwBtAHMALgB0AHMAQcwJCwE8AEHYCQsrAgAAACQAAABJAG4AZABlAHgAIABvAHUAdAAgAG8AZgAgAHIAYQBuAGcAZQBBjAoLASwAQZgKCxsCAAAAFAAAAH4AbABpAGIALwByAHQALgB0AHMAQdwKCwE8AEHoCgslAgAAAB4AAAB+AGwAaQBiAC8AcgB0AC8AdABsAHMAZgAuAHQAcwBBnAsLASwAQagLCyECAAAAGgAAAH4AbABpAGIALwBhAHIAcgBhAHkALgB0AHMAQcwLCwEsAEHYCwsjAgAAABwAAABJAG4AdgBhAGwAaQBkACAAbABlAG4AZwB0AGgAQfwLCwE8AEGIDAstAgAAACYAAAB+AGwAaQBiAC8AYQByAHIAYQB5AGIAdQBmAGYAZQByAC4AdABzAEG8DAsBPABByAwLKwIAAAAkAAAAfgBsAGkAYgAvAHQAeQBwAGUAZABhAHIAcgBhAHkALgB0AHMAQYANC8ABboP5ogAAAADRVyf8KRVETpmVYtvA3TT1q2NR/kGQQzw6biS3YcW73uouSQbg0k1CHOsd/hyS0Qn1NYLoPqcpsSZwnOmERLsuOdaROUF+X7SLX4Sc9DlTg/+X+B87KPm9ixEv7w+YBd7PfjZtH20KWmY/Rk+3Ccsnx7ondS3qX573OQc9e/Hl67Ff+2vqklKKRjADVghdjR8gvM/wq2t7/GGR46kdNvSaX4WZZQgb5l6A2P+NQGigFFcVBgYxJ3NNAEHMDgsBfABB2A4LZQIAAABeAAAARQBsAGUAbQBlAG4AdAAgAHQAeQBwAGUAIABtAHUAcwB0ACAAYgBlACAAbgB1AGwAbABhAGIAbABlACAAaQBmACAAYQByAHIAYQB5ACAAaQBzACAAaABvAGwAZQB5AEHMDwsBPABB2A8LMQIAAAAqAAAATwBiAGoAZQBjAHQAIABhAGwAcgBlAGEAZAB5ACAAcABpAG4AbgBlAGQAQYwQCwE8AEGYEAsvAgAAACgAAABPAGIAagBlAGMAdAAgAGkAcwAgAG4AbwB0ACAAcABpAG4AbgBlAGQAQdAQCx4HAAAAIAAAACAAAAAgAAAAAAAAAAEZAAACQQAAAgk="));
    const fft = await fftInstantiate(fftModule);
    Object.assign(globalThis, fft);
})();