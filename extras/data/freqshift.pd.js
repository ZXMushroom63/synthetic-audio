this.HVCC_MODULES.freqshift_Module = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  
  return (
async function(moduleArg = {}) {
  var moduleRtn;

var Module=moduleArg;var readyPromiseResolve,readyPromiseReject;var readyPromise=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;var moduleOverrides={...Module};var arguments_=[];var thisProgram="./this.program";var scriptDirectory="";var readAsync,readBinary;if(ENVIRONMENT_IS_SHELL){if(typeof process=="object"&&typeof require==="function"||typeof window=="object"||typeof WorkerGlobalScope!="undefined")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)")}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptName){scriptDirectory=_scriptName}if(scriptDirectory.startsWith("blob:")){scriptDirectory=""}else{scriptDirectory=scriptDirectory.slice(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}if(!(typeof window=="object"||typeof WorkerGlobalScope!="undefined"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");{readAsync=async url=>{assert(!isFileURI(url),"readAsync does not work with file:// URLs");var response=await fetch(url,{credentials:"same-origin"});if(response.ok){return response.arrayBuffer()}throw new Error(response.status+" : "+response.url)}}}else{throw new Error("environment detection error")}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;checkIncomingModuleAPI();if(Module["arguments"])arguments_=Module["arguments"];legacyModuleProp("arguments","arguments_");if(Module["thisProgram"])thisProgram=Module["thisProgram"];legacyModuleProp("thisProgram","thisProgram");assert(typeof Module["memoryInitializerPrefixURL"]=="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["pthreadMainPrefixURL"]=="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["cdInitializerPrefixURL"]=="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["filePackagePrefixURL"]=="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead");assert(typeof Module["read"]=="undefined","Module.read option was removed");assert(typeof Module["readAsync"]=="undefined","Module.readAsync option was removed (modify readAsync in JS)");assert(typeof Module["readBinary"]=="undefined","Module.readBinary option was removed (modify readBinary in JS)");assert(typeof Module["setWindowTitle"]=="undefined","Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");assert(typeof Module["TOTAL_MEMORY"]=="undefined","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");legacyModuleProp("asm","wasmExports");legacyModuleProp("readAsync","readAsync");legacyModuleProp("readBinary","readBinary");legacyModuleProp("setWindowTitle","setWindowTitle");assert(!ENVIRONMENT_IS_WORKER,"worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.");assert(!ENVIRONMENT_IS_NODE,"node environment detected but not enabled at build time.  Add `node` to `-sENVIRONMENT` to enable.");assert(!ENVIRONMENT_IS_SHELL,"shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");var wasmBinary=Module["wasmBinary"];legacyModuleProp("wasmBinary","wasmBinary");if(typeof WebAssembly!="object"){err("no native wasm support detected")}var wasmMemory;var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed"+(text?": "+text:""))}}var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAP64,HEAPU64,HEAPF64;var runtimeInitialized=false;var isFileURI=filename=>filename.startsWith("file://");function writeStackCookie(){var max=_emscripten_stack_get_end();assert((max&3)==0);if(max==0){max+=4}HEAPU32[max>>2]=34821223;HEAPU32[max+4>>2]=2310721022;HEAPU32[0>>2]=1668509029}function checkStackCookie(){if(ABORT)return;var max=_emscripten_stack_get_end();if(max==0){max+=4}var cookie1=HEAPU32[max>>2];var cookie2=HEAPU32[max+4>>2];if(cookie1!=34821223||cookie2!=2310721022){abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`)}if(HEAPU32[0>>2]!=1668509029){abort("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(()=>{var h16=new Int16Array(1);var h8=new Int8Array(h16.buffer);h16[0]=25459;if(h8[0]!==115||h8[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();if(Module["ENVIRONMENT"]){throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)")}function legacyModuleProp(prop,newName,incoming=true){if(!Object.getOwnPropertyDescriptor(Module,prop)){Object.defineProperty(Module,prop,{configurable:true,get(){let extra=incoming?" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)":"";abort(`\`Module.${prop}\` has been replaced by \`${newName}\``+extra)}})}}function consumedModuleProp(prop){if(!Object.getOwnPropertyDescriptor(Module,prop)){Object.defineProperty(Module,prop,{configurable:true,set(){abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`)}})}}function ignoredModuleProp(prop){if(Object.getOwnPropertyDescriptor(Module,prop)){abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`)}}function isExportedByForceFilesystem(name){return name==="FS_createPath"||name==="FS_createDataFile"||name==="FS_createPreloadedFile"||name==="FS_unlink"||name==="addRunDependency"||name==="FS_createLazyFile"||name==="FS_createDevice"||name==="removeRunDependency"}function hookGlobalSymbolAccess(sym,func){}function missingGlobal(sym,msg){hookGlobalSymbolAccess(sym,()=>{warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`)})}missingGlobal("buffer","Please use HEAP8.buffer or wasmMemory.buffer");missingGlobal("asm","Please use wasmExports instead");function missingLibrarySymbol(sym){hookGlobalSymbolAccess(sym,()=>{var msg=`\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;var librarySymbol=sym;if(!librarySymbol.startsWith("_")){librarySymbol="$"+sym}msg+=` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;if(isExportedByForceFilesystem(sym)){msg+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"}warnOnce(msg)});unexportedRuntimeSymbol(sym)}function unexportedRuntimeSymbol(sym){if(!Object.getOwnPropertyDescriptor(Module,sym)){Object.defineProperty(Module,sym,{configurable:true,get(){var msg=`'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;if(isExportedByForceFilesystem(sym)){msg+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"}abort(msg)}})}}var runtimeDebug=true;function updateMemoryViews(){var b=wasmMemory.buffer;Module["HEAP8"]=HEAP8=new Int8Array(b);Module["HEAP16"]=HEAP16=new Int16Array(b);Module["HEAPU8"]=HEAPU8=new Uint8Array(b);Module["HEAPU16"]=HEAPU16=new Uint16Array(b);Module["HEAP32"]=HEAP32=new Int32Array(b);Module["HEAPU32"]=HEAPU32=new Uint32Array(b);Module["HEAPF32"]=HEAPF32=new Float32Array(b);Module["HEAPF64"]=HEAPF64=new Float64Array(b);Module["HEAP64"]=HEAP64=new BigInt64Array(b);Module["HEAPU64"]=HEAPU64=new BigUint64Array(b)}assert(!Module["STACK_SIZE"],"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");assert(typeof Int32Array!="undefined"&&typeof Float64Array!=="undefined"&&Int32Array.prototype.subarray!=undefined&&Int32Array.prototype.set!=undefined,"JS engine does not provide full typed array support");assert(!Module["wasmMemory"],"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally");assert(!Module["INITIAL_MEMORY"],"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}consumedModuleProp("preRun");callRuntimeCallbacks(onPreRuns)}function initRuntime(){assert(!runtimeInitialized);runtimeInitialized=true;checkStackCookie();wasmExports["__wasm_call_ctors"]()}function postRun(){checkStackCookie();if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}consumedModuleProp("postRun");callRuntimeCallbacks(onPostRuns)}var runDependencies=0;var dependenciesFulfilled=null;var runDependencyTracking={};var runDependencyWatcher=null;function addRunDependency(id){runDependencies++;Module["monitorRunDependencies"]?.(runDependencies);if(id){assert(!runDependencyTracking[id]);runDependencyTracking[id]=1;if(runDependencyWatcher===null&&typeof setInterval!="undefined"){runDependencyWatcher=setInterval(()=>{if(ABORT){clearInterval(runDependencyWatcher);runDependencyWatcher=null;return}var shown=false;for(var dep in runDependencyTracking){if(!shown){shown=true;err("still waiting on run dependencies:")}err(`dependency: ${dep}`)}if(shown){err("(end of list)")}},1e4)}}else{err("warning: run dependency added without ID")}}function removeRunDependency(id){runDependencies--;Module["monitorRunDependencies"]?.(runDependencies);if(id){assert(runDependencyTracking[id]);delete runDependencyTracking[id]}else{err("warning: run dependency removed without ID")}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module["onAbort"]?.(what);what="Aborted("+what+")";err(what);ABORT=true;var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var FS={error(){abort("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM")},init(){FS.error()},createDataFile(){FS.error()},createPreloadedFile(){FS.error()},createLazyFile(){FS.error()},open(){FS.error()},mkdev(){FS.error()},registerDevice(){FS.error()},analyzePath(){FS.error()},ErrnoError(){FS.error()}};Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;function createExportWrapper(name,nargs){return(...args)=>{assert(runtimeInitialized,`native function \`${name}\` called before runtime initialization`);var f=wasmExports[name];assert(f,`exported native function \`${name}\` not found`);assert(args.length<=nargs,`native function \`${name}\` called with ${args.length} args but expects ${nargs}`);return f(...args)}}var wasmBinaryFile;function findWasmBinary(){return base64Decode("")}function getBinarySync(file){if(ArrayBuffer.isView(file)){return file}if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw"both async and sync fetching of the wasm failed"}async function getWasmBinary(binaryFile){return getBinarySync(binaryFile)}async function instantiateArrayBuffer(binaryFile,imports){try{var binary=await getWasmBinary(binaryFile);var instance=await WebAssembly.instantiate(binary,imports);return instance}catch(reason){err(`failed to asynchronously prepare wasm: ${reason}`);if(isFileURI(wasmBinaryFile)){err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`)}abort(reason)}}async function instantiateAsync(binary,binaryFile,imports){return instantiateArrayBuffer(binaryFile,imports)}function getWasmImports(){return{env:wasmImports,wasi_snapshot_preview1:wasmImports}}async function createWasm(){function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports["memory"];assert(wasmMemory,"memory not found in wasm exports");updateMemoryViews();wasmTable=wasmExports["__indirect_function_table"];assert(wasmTable,"table not found in wasm exports");removeRunDependency("wasm-instantiate");return wasmExports}addRunDependency("wasm-instantiate");var trueModule=Module;function receiveInstantiationResult(result){assert(Module===trueModule,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");trueModule=null;return receiveInstance(result["instance"])}var info=getWasmImports();if(Module["instantiateWasm"]){return new Promise((resolve,reject)=>{try{Module["instantiateWasm"](info,(mod,inst)=>{receiveInstance(mod,inst);resolve(mod.exports)})}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);reject(e)}})}wasmBinaryFile??=findWasmBinary();try{var result=await instantiateAsync(wasmBinary,wasmBinaryFile,info);var exports=receiveInstantiationResult(result);return exports}catch(e){readyPromiseReject(e);return Promise.reject(e)}}class ExitStatus{name="ExitStatus";constructor(status){this.message=`Program terminated with exit(${status})`;this.status=status}}var uleb128Encode=(n,target)=>{assert(n<16384);if(n<128){target.push(n)}else{target.push(n%128|128,n>>7)}};var sigToWasmTypes=sig=>{var typeNames={i:"i32",j:"i64",f:"f32",d:"f64",e:"externref",p:"i32"};var type={parameters:[],results:sig[0]=="v"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){assert(sig[i]in typeNames,"invalid signature char: "+sig[i]);type.parameters.push(typeNames[sig[i]])}return type};var generateFuncType=(sig,target)=>{var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={i:127,p:127,j:126,f:125,d:124,e:111};target.push(96);uleb128Encode(sigParam.length,target);for(var paramType of sigParam){assert(paramType in typeCodes,`invalid signature char: ${paramType}`);target.push(typeCodes[paramType])}if(sigRet=="v"){target.push(0)}else{target.push(1,typeCodes[sigRet])}};var convertJsFunctionToWasm=(func,sig)=>{if(typeof WebAssembly.Function=="function"){return new WebAssembly.Function(sigToWasmTypes(sig),func)}var typeSectionBody=[1];generateFuncType(sig,typeSectionBody);var bytes=[0,97,115,109,1,0,0,0,1];uleb128Encode(typeSectionBody.length,bytes);bytes.push(...typeSectionBody);bytes.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0);var module=new WebAssembly.Module(new Uint8Array(bytes));var instance=new WebAssembly.Instance(module,{e:{f:func}});var wrappedFunc=instance.exports["f"];return wrappedFunc};var wasmTableMirror=[];var wasmTable;var getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];if(!func){wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}assert(wasmTable.get(funcPtr)==func,"JavaScript-side Wasm function table mirror is out of date!");return func};var updateTableMap=(offset,count)=>{if(functionsInTableMap){for(var i=offset;i<offset+count;i++){var item=getWasmTableEntry(i);if(item){functionsInTableMap.set(item,i)}}}};var functionsInTableMap;var getFunctionAddress=func=>{if(!functionsInTableMap){functionsInTableMap=new WeakMap;updateTableMap(0,wasmTable.length)}return functionsInTableMap.get(func)||0};var freeTableIndexes=[];var getEmptyTableSlot=()=>{if(freeTableIndexes.length){return freeTableIndexes.pop()}try{wasmTable.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH."}return wasmTable.length-1};var setWasmTableEntry=(idx,func)=>{wasmTable.set(idx,func);wasmTableMirror[idx]=wasmTable.get(idx)};var addFunction=(func,sig)=>{assert(typeof func!="undefined");var rtn=getFunctionAddress(func);if(rtn){return rtn}var ret=getEmptyTableSlot();try{setWasmTableEntry(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}assert(typeof sig!="undefined","Missing signature argument to addFunction: "+func);var wrapped=convertJsFunctionToWasm(func,sig);setWasmTableEntry(ret,wrapped)}functionsInTableMap.set(func,ret);return ret};var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var onPostRuns=[];var addOnPostRun=cb=>onPostRuns.unshift(cb);var onPreRuns=[];var addOnPreRun=cb=>onPreRuns.unshift(cb);var base64Decode=b64=>{assert(b64.length%4==0);var b1,b2,i=0,j=0,bLength=b64.length;var output=new Uint8Array((bLength*3>>2)-(b64[bLength-2]=="=")-(b64[bLength-1]=="="));for(;i<bLength;i+=4,j+=3){b1=base64ReverseLookup[b64.charCodeAt(i+1)];b2=base64ReverseLookup[b64.charCodeAt(i+2)];output[j]=base64ReverseLookup[b64.charCodeAt(i)]<<2|b1>>4;output[j+1]=b1<<4|b2>>2;output[j+2]=b2<<6|base64ReverseLookup[b64.charCodeAt(i+3)]}return output};var noExitRuntime=Module["noExitRuntime"]||true;var ptrToString=ptr=>{assert(typeof ptr==="number");ptr>>>=0;return"0x"+ptr.toString(16).padStart(8,"0")};var warnOnce=text=>{warnOnce.shown||={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}};var __abort_js=()=>abort("native code called abort()");var abortOnCannotGrowMemory=requestedSize=>{abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`)};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;abortOnCannotGrowMemory(requestedSize)};var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder:undefined;var UTF8ArrayToString=(heapOrArray,idx=0,maxBytesToRead=NaN)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{if((u0&248)!=240)warnOnce("Invalid UTF-8 leading byte "+ptrToString(u0)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!");u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var UTF8ToString=(ptr,maxBytesToRead)=>{assert(typeof ptr=="number",`UTF8ToString expects a number (got ${typeof ptr})`);return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""};var _fd_close=fd=>{abort("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")};var INT53_MAX=9007199254740992;var INT53_MIN=-9007199254740992;var bigintToI53Checked=num=>num<INT53_MIN||num>INT53_MAX?NaN:Number(num);function _fd_seek(fd,offset,whence,newOffset){offset=bigintToI53Checked(offset);return 70}var printCharBuffers=[null,[],[]];var printChar=(stream,curr)=>{var buffer=printCharBuffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer));buffer.length=0}else{buffer.push(curr)}};var flush_NO_FILESYSTEM=()=>{_fflush(0);if(printCharBuffers[1].length)printChar(1,10);if(printCharBuffers[2].length)printChar(2,10)};var _fd_write=(fd,iov,iovcnt,pnum)=>{var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;for(var j=0;j<len;j++){printChar(fd,HEAPU8[ptr+j])}num+=len}HEAPU32[pnum>>2]=num;return 0};for(var base64ReverseLookup=new Uint8Array(123),i=25;i>=0;--i){base64ReverseLookup[48+i]=52+i;base64ReverseLookup[65+i]=i;base64ReverseLookup[97+i]=26+i}base64ReverseLookup[43]=62;base64ReverseLookup[47]=63;function checkIncomingModuleAPI(){ignoredModuleProp("fetchSettings")}var wasmImports={_abort_js:__abort_js,emscripten_resize_heap:_emscripten_resize_heap,fd_close:_fd_close,fd_seek:_fd_seek,fd_write:_fd_write};var wasmExports=await createWasm();var ___wasm_call_ctors=createExportWrapper("__wasm_call_ctors",0);var _malloc=Module["_malloc"]=createExportWrapper("malloc",1);var _hv_freqshift_new=Module["_hv_freqshift_new"]=createExportWrapper("hv_freqshift_new",1);var _hv_freqshift_new_with_options=Module["_hv_freqshift_new_with_options"]=createExportWrapper("hv_freqshift_new_with_options",4);var _hv_table_setLength=Module["_hv_table_setLength"]=createExportWrapper("hv_table_setLength",3);var _hv_table_getBuffer=Module["_hv_table_getBuffer"]=createExportWrapper("hv_table_getBuffer",2);var _hv_table_getLength=Module["_hv_table_getLength"]=createExportWrapper("hv_table_getLength",2);var _hv_msg_getByteSize=Module["_hv_msg_getByteSize"]=createExportWrapper("hv_msg_getByteSize",1);var _hv_msg_init=Module["_hv_msg_init"]=createExportWrapper("hv_msg_init",3);var _hv_msg_getTimestamp=Module["_hv_msg_getTimestamp"]=createExportWrapper("hv_msg_getTimestamp",1);var _hv_msg_getFloat=Module["_hv_msg_getFloat"]=createExportWrapper("hv_msg_getFloat",2);var _hv_msg_setFloat=Module["_hv_msg_setFloat"]=createExportWrapper("hv_msg_setFloat",3);var _hv_msg_hasFormat=Module["_hv_msg_hasFormat"]=createExportWrapper("hv_msg_hasFormat",2);var _hv_getNumInputChannels=Module["_hv_getNumInputChannels"]=createExportWrapper("hv_getNumInputChannels",1);var _hv_getNumOutputChannels=Module["_hv_getNumOutputChannels"]=createExportWrapper("hv_getNumOutputChannels",1);var _hv_setPrintHook=Module["_hv_setPrintHook"]=createExportWrapper("hv_setPrintHook",2);var _hv_setSendHook=Module["_hv_setSendHook"]=createExportWrapper("hv_setSendHook",2);var _hv_stringToHash=Module["_hv_stringToHash"]=createExportWrapper("hv_stringToHash",1);var _hv_sendBangToReceiver=Module["_hv_sendBangToReceiver"]=createExportWrapper("hv_sendBangToReceiver",2);var _hv_sendFloatToReceiver=Module["_hv_sendFloatToReceiver"]=createExportWrapper("hv_sendFloatToReceiver",3);var _hv_sendSymbolToReceiver=Module["_hv_sendSymbolToReceiver"]=createExportWrapper("hv_sendSymbolToReceiver",3);var _hv_sendMessageToReceiverV=Module["_hv_sendMessageToReceiverV"]=createExportWrapper("hv_sendMessageToReceiverV",5);var _hv_sendMessageToReceiverFF=Module["_hv_sendMessageToReceiverFF"]=createExportWrapper("hv_sendMessageToReceiverFF",5);var _hv_sendMessageToReceiverFFF=Module["_hv_sendMessageToReceiverFFF"]=createExportWrapper("hv_sendMessageToReceiverFFF",6);var _hv_samplesToMilliseconds=Module["_hv_samplesToMilliseconds"]=createExportWrapper("hv_samplesToMilliseconds",2);var _hv_processInline=Module["_hv_processInline"]=createExportWrapper("hv_processInline",4);var _hv_delete=Module["_hv_delete"]=createExportWrapper("hv_delete",1);var _fflush=createExportWrapper("fflush",1);var _strerror=createExportWrapper("strerror",1);var _emscripten_stack_init=wasmExports["emscripten_stack_init"];var _emscripten_stack_get_free=wasmExports["emscripten_stack_get_free"];var _emscripten_stack_get_base=wasmExports["emscripten_stack_get_base"];var _emscripten_stack_get_end=wasmExports["emscripten_stack_get_end"];var __emscripten_stack_restore=wasmExports["_emscripten_stack_restore"];var __emscripten_stack_alloc=wasmExports["_emscripten_stack_alloc"];var _emscripten_stack_get_current=wasmExports["emscripten_stack_get_current"];var missingLibrarySymbols=["writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertI32PairToI53Checked","convertU32PairToI53","stackAlloc","getTempRet0","setTempRet0","zeroMemory","exitJS","getHeapMax","growMemory","strError","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","emscriptenLog","readEmAsmArgs","jstoi_q","getExecutableName","listenOnce","autoResumeAudioContext","getDynCaller","dynCall","handleException","keepRuntimeAlive","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","addOnInit","addOnPostCtor","addOnPreMain","addOnExit","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","getCFunc","ccall","cwrap","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","jsStackTrace","getCallstack","convertPCtoSourceLocation","getEnvStrings","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","initRandomFill","randomFill","safeSetTimeout","setImmediateWrapped","safeRequestAnimationFrame","clearImmediateWrapped","registerPostMainLoop","registerPreMainLoop","getPromise","makePromise","idsToPromises","makePromiseCallback","ExceptionInfo","findMatchingCatch","Browser_asyncPrepareDataCounter","isLeapYear","ydayFromDate","arraySum","addDays","getSocketFromFD","getSocketAddress","FS_createPreloadedFile","FS_modeStringToFlags","FS_getMode","FS_stdin_getChar","FS_unlink","FS_createDataFile","FS_mkdirTree","_setNetworkCallback","heapObjectForWebGLType","toTypedArrayIndex","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","webgl_enable_EXT_polygon_offset_clamp","webgl_enable_EXT_clip_control","webgl_enable_WEBGL_polygon_mode","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory","demangle","stackTrace"];missingLibrarySymbols.forEach(missingLibrarySymbol);var unexportedSymbols=["run","addRunDependency","removeRunDependency","out","err","callMain","abort","wasmMemory","wasmExports","writeStackCookie","checkStackCookie","INT53_MAX","INT53_MIN","bigintToI53Checked","stackSave","stackRestore","ptrToString","abortOnCannotGrowMemory","ENV","ERRNO_CODES","DNS","Protocols","Sockets","timers","warnOnce","readEmAsmArgsArray","jstoi_s","wasmTable","noExitRuntime","addOnPreRun","addOnPostRun","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","freeTableIndexes","functionsInTableMap","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","UTF16Decoder","JSEvents","specialHTMLTargets","findCanvasEventTarget","currentFullscreenStrategy","restoreOldWindowedStyle","UNWIND_CACHE","ExitStatus","flush_NO_FILESYSTEM","emSetImmediate","emClearImmediate_deps","emClearImmediate","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","Browser","getPreloadedImageData__data","wget","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","base64Decode","SYSCALLS","preloadPlugins","FS_stdin_getChar_buffer","FS_createPath","FS_createDevice","FS_readFile","FS","FS_createLazyFile","MEMFS","TTY","PIPEFS","SOCKFS","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","allocateUTF8","allocateUTF8OnStack","print","printErr"];unexportedSymbols.forEach(unexportedRuntimeSymbol);var calledRun;function stackCheckInit(){_emscripten_stack_init();writeStackCookie()}function run(){if(runDependencies>0){dependenciesFulfilled=run;return}stackCheckInit();preRun();if(runDependencies>0){dependenciesFulfilled=run;return}function doRun(){assert(!calledRun);calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);Module["onRuntimeInitialized"]?.();consumedModuleProp("onRuntimeInitialized");assert(!Module["_main"],'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(()=>{setTimeout(()=>Module["setStatus"](""),1);doRun()},1)}else{doRun()}checkStackCookie()}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}consumedModuleProp("preInit");run();var audioWorkletSupported=false&&typeof AudioWorklet==="function"&&location.protocol!=="file:";var AudioLibLoader=function(){var self=this;this.webAudioContext=null;this.webAudioProcessor=null;this.webAudioWorklet=null;this.node=null;this.audiolib=null;this.eventsIn={};this.eventsOut={};this.midiOutEvent={displayName:"midiOutMessage",eventId:"midiOutMessage",onFire:null};this.paramsIn={ShiftAmountHz:{min:-2048,max:2048,default:0,type:"float",eventId:"ShiftAmountHz",displayName:"ShiftAmountHz",value:0,setValue:function(v){self.setFloatParameter("ShiftAmountHz",v)}}};this.paramsOut={}};AudioLibLoader.prototype.init=function(options){options.sendHook||=()=>{};this.webAudioContext=options.webAudioContext||new(window.AudioContext||window.webkitAudioContext||null);if(this.webAudioContext){return(async()=>{var blockSize=options.blockSize||2048;if(audioWorkletSupported){await this.webAudioContext.audioWorklet.addModule("data:text/js;base64,");this.webAudioWorklet=new AudioWorkletNode(this.webAudioContext,"freqshift_AudioLibWorklet",{outputChannelCount:[2],processorOptions:{sampleRate:this.webAudioContext.sampleRate,blockSize}});this.node=this.webAudioWorklet;this.webAudioWorklet.port.onmessage=event=>{if(event.data.type==="printHook"){options.printHook(event.data.payload)}else if(event.data.type==="sendHook"){if(this.paramsOut[event.data.payload[0]]){this.paramsOut[event.data.payload[0]].value=event.data.payload[1];if(this.paramsOut[event.data.payload[0]].onUpdate){this.paramsOut[event.data.payload[0]].onUpdate(event.data.payload[1])}}if(this.eventsOut[event.data.payload[0]]&&this.eventsOut[event.data.payload[0]].onFire){this.eventsOut[event.data.payload[0]].onFire(event.data.payload[1])}options.sendHook(event.data.payload[0],event.data.payload[1])}else if(event.data.type==="midiOut"){options.sendHook("midiOutMessage",event.data.payload);if(this.midiOutEvent.onFire){this.midiOutEvent.onFire(event.data.payload)}}else{console.log("Unhandled message from freqshift_AudioLibWorklet:",event.data)}}}else{console.warn("heavy: AudioWorklet not supported, reverting to ScriptProcessorNode");var instance=new freqshift_AudioLib({sampleRate:this.webAudioContext.sampleRate,blockSize,printHook:options.printHook,sendHook:options.sendHook});this.audiolib=instance;this.webAudioProcessor=this.webAudioContext.createScriptProcessor(blockSize,instance.getNumInputChannels(),Math.max(instance.getNumOutputChannels(),1));this.webAudioProcessor.onaudioprocess=function(e){instance.process(e)};this.node=this.webAudioProcessor}for(k in this.paramsIn){const param=this.paramsIn[k];param.setValue(param.default)}})()}else{console.error("heavy: failed to load - WebAudio API not available in this browser")}};AudioLibLoader.prototype.setFloatParameter=function(name,value){if(this.paramsIn[name]){this.paramsIn[name].value=value}if(this.audiolib){this.audiolib.setFloatParameter(name,value)}else{this.webAudioWorklet.port.postMessage({type:"setFloatParameter",name,value})}};AudioLibLoader.prototype.sendEvent=function(name,value){if(this.audiolib){this.audiolib.sendEvent(name,value)}else{this.webAudioWorklet.port.postMessage({type:"sendEvent",name,value})}};AudioLibLoader.prototype.sendMidi=function(message){if(this.audiolib){this.audiolib.sendMidi(message)}else{this.webAudioWorklet.port.postMessage({type:"sendMidi",message})}};AudioLibLoader.prototype.fillTableWithFloatBuffer=function(name,buffer){if(this.audiolib){this.audiolib.fillTableWithFloatBuffer(name,buffer)}else{this.webAudioWorklet.port.postMessage({type:"fillTableWithFloatBuffer",name,buffer})}};Module.AudioLibLoader=AudioLibLoader;var freqshift_AudioLib=function(options){this.sampleRate=options.sampleRate||44100;this.blockSize=options.blockSize||2048;this.heavyContext=_hv_freqshift_new_with_options(this.sampleRate,10,2,2);this.setPrintHook(options.printHook);this.setSendHook(options.sendHook);var lengthOutSamples=this.blockSize*this.getNumOutputChannels();var lengthInSamples=this.blockSize*this.getNumInputChannels();this.processBuffer=new Float32Array(Module.HEAPF32.buffer,Module._malloc(lengthOutSamples*Float32Array.BYTES_PER_ELEMENT),lengthOutSamples);this.inputBuffer=new Float32Array(Module.HEAPF32.buffer,Module._malloc(lengthInSamples*Float32Array.BYTES_PER_ELEMENT),lengthInSamples)};var parameterInHashes={ShiftAmountHz:4088700915};var eventInHashes={};var tableHashes={};freqshift_AudioLib.prototype.process=function(event){var inputChannelCount=this.getNumInputChannels();if(inputChannelCount>0){for(let i=0;i<inputChannelCount;i++){if(event.inputBuffer.numberOfChannels-2<i){continue}this.inputBuffer.set(event.inputBuffer.getChannelData(i),i*this.blockSize)}}else{this.inputBuffer.set(0)}_hv_processInline(this.heavyContext,this.inputBuffer.byteOffset,this.processBuffer.byteOffset,this.blockSize);var outputChannelCount=this.getNumOutputChannels();for(var i=0;i<outputChannelCount;++i){var output=event.outputBuffer.getChannelData(i);output.set(this.processBuffer.subarray(i*this.blockSize,(i+1)*this.blockSize))}};freqshift_AudioLib.prototype.getNumInputChannels=function(){return this.heavyContext?_hv_getNumInputChannels(this.heavyContext):-1};freqshift_AudioLib.prototype.getNumOutputChannels=function(){return this.heavyContext?_hv_getNumOutputChannels(this.heavyContext):-1};freqshift_AudioLib.prototype.setPrintHook=function(hook){if(!this.heavyContext){console.error("heavy: Can't set Print Hook, no Heavy Context instantiated");return}if(hook){var printHook=addFunction(function(context,printName,str,msg){var timeInSecs=_hv_samplesToMilliseconds(context,_hv_msg_getTimestamp(msg))/1e3;var m=UTF8ToString(printName)+" ["+timeInSecs.toFixed(3)+"]: "+UTF8ToString(str);hook(m)},"viiii");_hv_setPrintHook(this.heavyContext,printHook)}};freqshift_AudioLib.prototype.setSendHook=function(hook){if(!this.heavyContext){console.error("heavy: Can't set Send Hook, no Heavy Context instantiated");return}if(hook){var sendHook=addFunction(function(context,sendName,sendHash,msg){const midiMessage=sendMidiOut(UTF8ToString(sendName),msg);if(midiMessage.length>0){hook("midiOutMessage",midiMessage)}else{hook(UTF8ToString(sendName),_hv_msg_getFloat(msg,0))}},"viiii");_hv_setSendHook(this.heavyContext,sendHook)}};freqshift_AudioLib.prototype.sendEvent=function(name){if(this.heavyContext){_hv_sendBangToReceiver(this.heavyContext,eventInHashes[name])}};freqshift_AudioLib.prototype.sendMidi=function(message){sendMidiIn(this.heavyContext,message)};freqshift_AudioLib.prototype.setFloatParameter=function(name,floatValue){if(this.heavyContext){_hv_sendFloatToReceiver(this.heavyContext,parameterInHashes[name],parseFloat(floatValue))}};freqshift_AudioLib.prototype.sendStringToReceiver=function(name,message){if(this.heavyContext){var r=allocate(intArrayFromString(name),"i8",ALLOC_STACK);var m=allocate(intArrayFromString(message),"i8",ALLOC_STACK);_hv_sendSymbolToReceiver(this.heavyContext,_hv_stringToHash(r),m)}};freqshift_AudioLib.prototype.fillTableWithFloatBuffer=function(name,buffer){var tableHash=tableHashes[name];if(_hv_table_getBuffer(this.heavyContext,tableHash)!==0){_hv_table_setLength(this.heavyContext,tableHash,buffer.length);tableBuffer=new Float32Array(Module.HEAPF32.buffer,_hv_table_getBuffer(this.heavyContext,tableHash),buffer.length);tableBuffer.set(buffer)}else{console.error("heavy: Table '"+name+"' doesn't exist in the patch context.")}};Module.freqshift_AudioLib=freqshift_AudioLib;function sendMidiIn(hv_context,message){if(hv_context){var command=message[0]&240;var channel=message[0]&15;var data1=message[1];var data2=message[2];for(var i=1;i<=2;i++){_hv_sendMessageToReceiverFF(hv_context,HV_HASH_MIDIIN,0,message[i],channel)}if(MIDI_REALTIME.includes(message[0])){_hv_sendMessageToReceiverFF(hv_context,HV_HASH_MIDIREALTIMEIN,0,message[0])}switch(command){case 128:_hv_sendMessageToReceiverFFF(hv_context,HV_HASH_NOTEIN,0,data1,0,channel);break;case 144:_hv_sendMessageToReceiverFFF(hv_context,HV_HASH_NOTEIN,0,data1,data2,channel);break;case 160:_hv_sendMessageToReceiverFFF(hv_context,HV_HASH_POLYTOUCHIN,0,data2,data1,channel);break;case 176:_hv_sendMessageToReceiverFFF(hv_context,HV_HASH_CTLIN,0,data2,data1,channel);break;case 192:_hv_sendMessageToReceiverFF(hv_context,HV_HASH_PGMIN,0,data1,channel);break;case 208:_hv_sendMessageToReceiverFF(hv_context,HV_HASH_TOUCHIN,0,data1,channel);break;case 224:var value=data2<<7|data1;_hv_sendMessageToReceiverFF(hv_context,HV_HASH_BENDIN,0,value,channel);break;default:}}}function sendMidiOut(sendName,msg){switch(sendName){case"__hv_noteout":var note=_hv_msg_getFloat(msg,0);var velocity=_hv_msg_getFloat(msg,1);var channel=_hv_msg_getFloat(msg,2)%16;return[(velocity>0?144:128)|channel,note,velocity];case"__hv_ctlout":var value=_hv_msg_getFloat(msg,0);var cc=_hv_msg_getFloat(msg,1);var channel=_hv_msg_getFloat(msg,2)%16;return[176|channel,cc,value];case"__hv_pgmout":var program=_hv_msg_getFloat(msg,0);var channel=_hv_msg_getFloat(msg,1)%16;return[192|channel,program];case"__hv_touchout":var pressure=_hv_msg_getFloat(msg,0);var channel=_hv_msg_getFloat(msg,1)%16;return[208|channel,pressure];case"__hv_polytouchout":var value=_hv_msg_getFloat(msg,0);var note=_hv_msg_getFloat(msg,1);var channel=_hv_msg_getFloat(msg,2)%16;return[160|channel,note,value];case"__hv_bendout":var value=_hv_msg_getFloat(msg,0);let lsb=value&127;let msb=value>>7&127;var channel=_hv_msg_getFloat(msg,1)%16;return[224|channel,lsb,msb];case"__hv_midiout":let firstByte=_hv_msg_getFloat(msg,0);return firstByte===192||firstByte===208?[_hv_msg_getFloat(msg,0),_hv_msg_getFloat(msg,1)]:[_hv_msg_getFloat(msg,0),_hv_msg_getFloat(msg,1),_hv_msg_getFloat(msg,2)];default:return[]}}const HV_HASH_NOTEIN=1742961827;const HV_HASH_CTLIN=1102974876;const HV_HASH_POLYTOUCHIN=3159560025;const HV_HASH_PGMIN=773759037;const HV_HASH_TOUCHIN=1429808573;const HV_HASH_BENDIN=813953271;const HV_HASH_MIDIIN=345387454;const HV_HASH_MIDIREALTIMEIN=1878985679;const MIDI_REALTIME=[248,250,251,252,254,255];moduleRtn=readyPromise;for(const prop of Object.keys(Module)){if(!(prop in moduleArg)){Object.defineProperty(moduleArg,prop,{configurable:true,get(){abort(`Access to module property ('${prop}') is no longer possible via the module constructor argument; Instead, use the result of the module constructor.`)}})}}


  return moduleRtn;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = freqshift_Module;
  // This default export looks redundant, but it allows TS to import this
  // commonjs style module.
  module.exports.default = freqshift_Module;
} else if (typeof define === 'function' && define['amd'])
  define([], () => freqshift_Module);
